{
  "version": 3,
  "sources": ["../node_modules/midi-writer-js/build/index.js", "../main.ts"],
  "sourcesContent": ["'use strict';\n\n/**\n * MIDI file format constants.\n * @return {Constants}\n */\nvar Constants = {\n    VERSION: '3.1.1',\n    HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],\n    HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],\n    HEADER_CHUNK_FORMAT0: [0x00, 0x00],\n    HEADER_CHUNK_FORMAT1: [0x00, 0x01],\n    HEADER_CHUNK_DIVISION: [0x00, 0x80],\n    TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],\n    META_EVENT_ID: 0xFF,\n    META_SMTPE_OFFSET: 0x54\n};\n\n// src/utils.ts\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\n\n// src/named.ts\nfunction isNamed(src) {\n  return src !== null && typeof src === \"object\" && typeof src.name === \"string\" ? true : false;\n}\n\n// src/pitch.ts\nfunction isPitch(pitch) {\n  return pitch !== null && typeof pitch === \"object\" && typeof pitch.step === \"number\" && typeof pitch.alt === \"number\" ? true : false;\n}\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\nvar STEPS_TO_OCTS = FIFTHS.map(\n  (fifths) => Math.floor(fifths * 7 / 12)\n);\nfunction encode(pitch) {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === void 0) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// src/note.ts\nvar NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\nvar cache = /* @__PURE__ */ new Map();\nvar stepToLetter = (step) => \"CDEFGAB\".charAt(step);\nvar altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nvar accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\nfunction note(src) {\n  const stringSrc = JSON.stringify(src);\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n  const value = typeof src === \"string\" ? parse(src) : isPitch(src) ? note(pitchName(src)) : isNamed(src) ? note(src.name) : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\nfunction tokenizeNote(str) {\n  const m = REGEX.exec(str);\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\nvar mod = (n, m) => (n % m + m) % m;\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName) {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : void 0;\n  const coord = encode({ step, alt, oct });\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height = oct === void 0 ? mod(SEMI[step] + alt, 12) - 12 * 99 : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === void 0 ? null : Math.pow(2, (height - 69) / 12) * 440;\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step\n  };\n}\nfunction pitchName(props) {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n\n// index.ts\nfunction isMidi(arg) {\n  return +arg >= 0 && +arg <= 127;\n}\nfunction toMidi(note$1) {\n  if (isMidi(note$1)) {\n    return +note$1;\n  }\n  const n = note(note$1);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Static utility functions used throughout the library.\n */\nvar Utils = /** @class */ (function () {\n    function Utils() {\n    }\n    /**\n     * Gets MidiWriterJS version number.\n     * @return {string}\n     */\n    Utils.version = function () {\n        return Constants.VERSION;\n    };\n    /**\n     * Convert a string to an array of bytes\n     * @param {string} string\n     * @return {array}\n     */\n    Utils.stringToBytes = function (string) {\n        return string.split('').map(function (char) { return char.charCodeAt(0); });\n    };\n    /**\n     * Checks if argument is a valid number.\n     * @param {*} n - Value to check\n     * @return {boolean}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.isNumeric = function (n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n    /**\n     * Returns the correct MIDI number for the specified pitch.\n     * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi\n     * @param {(string|number)} pitch - 'C#4' or midi note code\n     * @param {string} middleC\n     * @return {number}\n     */\n    Utils.getPitch = function (pitch, middleC) {\n        if (middleC === void 0) { middleC = 'C4'; }\n        return 60 - toMidi(middleC) + toMidi(pitch);\n    };\n    /**\n     * Translates number of ticks to MIDI timestamp format, returning an array of\n     * hex strings with the time values. Midi has a very particular time to express time,\n     * take a good look at the spec before ever touching this function.\n     * Thanks to https://github.com/sergi/jsmidi\n     *\n     * @param {number} ticks - Number of ticks to be translated\n     * @return {array} - Bytes that form the MIDI time value\n     */\n    Utils.numberToVariableLength = function (ticks) {\n        ticks = Math.round(ticks);\n        var buffer = ticks & 0x7F;\n        // eslint-disable-next-line no-cond-assign\n        while (ticks = ticks >> 7) {\n            buffer <<= 8;\n            buffer |= ((ticks & 0x7F) | 0x80);\n        }\n        var bList = [];\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            bList.push(buffer & 0xff);\n            if (buffer & 0x80)\n                buffer >>= 8;\n            else {\n                break;\n            }\n        }\n        return bList;\n    };\n    /**\n     * Counts number of bytes in string\n     * @param {string} s\n     * @return {number}\n     */\n    Utils.stringByteCount = function (s) {\n        return encodeURI(s).split(/%..|./).length - 1;\n    };\n    /**\n     * Get an int from an array of bytes.\n     * @param {array} bytes\n     * @return {number}\n     */\n    Utils.numberFromBytes = function (bytes) {\n        var hex = '';\n        var stringResult;\n        bytes.forEach(function (byte) {\n            stringResult = byte.toString(16);\n            // ensure string is 2 chars\n            if (stringResult.length == 1)\n                stringResult = \"0\" + stringResult;\n            hex += stringResult;\n        });\n        return parseInt(hex, 16);\n    };\n    /**\n     * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded\n     * @param {number} number\n     * @param {number} bytesNeeded\n     * @return {array} - Array of bytes\n     */\n    Utils.numberToBytes = function (number, bytesNeeded) {\n        bytesNeeded = bytesNeeded || 1;\n        var hexString = number.toString(16);\n        if (hexString.length & 1) { // Make sure hex string is even number of chars\n            hexString = '0' + hexString;\n        }\n        // Split hex string into an array of two char elements\n        var hexArray = hexString.match(/.{2}/g);\n        // Now parse them out as integers\n        var intArray = hexArray.map(function (item) { return parseInt(item, 16); });\n        // Prepend empty bytes if we don't have enough\n        if (intArray.length < bytesNeeded) {\n            while (bytesNeeded - intArray.length > 0) {\n                intArray.unshift(0);\n            }\n        }\n        return intArray;\n    };\n    /**\n     * Converts value to array if needed.\n     * @param {any} value\n     * @return {array}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.toArray = function (value) {\n        if (Array.isArray(value))\n            return value;\n        return [value];\n    };\n    /**\n     * Converts velocity to value 0-127\n     * @param {number} velocity - Velocity value 1-100\n     * @return {number}\n     */\n    Utils.convertVelocity = function (velocity) {\n        // Max passed value limited to 100\n        velocity = velocity > 100 ? 100 : velocity;\n        return Math.round(velocity / 100 * 127);\n    };\n    /**\n     * Gets the total number of ticks of a specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {(string|array)} duration\n     * @return {number}\n     */\n    Utils.getTickDuration = function (duration) {\n        if (Array.isArray(duration)) {\n            // Recursively execute this method for each item in the array and return the sum of tick durations.\n            return duration.map(function (value) {\n                return Utils.getTickDuration(value);\n            }).reduce(function (a, b) {\n                return a + b;\n            }, 0);\n        }\n        duration = duration.toString();\n        if (duration.toLowerCase().charAt(0) === 't') {\n            // If duration starts with 't' then the number that follows is an explicit tick count\n            var ticks = parseInt(duration.substring(1));\n            if (isNaN(ticks) || ticks < 0) {\n                throw new Error(duration + ' is not a valid duration.');\n            }\n            return ticks;\n        }\n        // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION\n        var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);\n        var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);\n        return Utils.getRoundedIfClose(tickDuration);\n    };\n    /**\n     * Due to rounding errors in JavaScript engines,\n     * it's safe to round when we're very close to the actual tick number\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getRoundedIfClose = function (tick) {\n        var roundedTick = Math.round(tick);\n        return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;\n    };\n    /**\n     * Due to low precision of MIDI,\n     * we need to keep track of rounding errors in deltas.\n     * This function will calculate the rounding error for a given duration.\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getPrecisionLoss = function (tick) {\n        var roundedTick = Math.round(tick);\n        return roundedTick - tick;\n    };\n    /**\n     * Gets what to multiple ticks/quarter note by to get the specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {string} duration\n     * @return {number}\n     */\n    Utils.getDurationMultiplier = function (duration) {\n        // Need to apply duration here.\n        // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.\n        if (duration === '0')\n            return 0;\n        var match = duration.match(/^(?<dotted>d+)?(?<base>\\d+)(?:t(?<tuplet>\\d*))?/);\n        if (match) {\n            var base = Number(match.groups.base);\n            // 1 or any power of two:\n            var isValidBase = base === 1 || ((base & (base - 1)) === 0);\n            if (isValidBase) {\n                // how much faster or slower is this note compared to a quarter?\n                var ratio = base / 4;\n                var durationInQuarters = 1 / ratio;\n                var _a = match.groups, dotted = _a.dotted, tuplet = _a.tuplet;\n                if (dotted) {\n                    var thisManyDots = dotted.length;\n                    var divisor = Math.pow(2, thisManyDots);\n                    durationInQuarters = durationInQuarters + (durationInQuarters * ((divisor - 1) / divisor));\n                }\n                if (typeof tuplet === 'string') {\n                    var fitInto = durationInQuarters * 2;\n                    // default to triplet:\n                    var thisManyNotes = Number(tuplet || '3');\n                    durationInQuarters = fitInto / thisManyNotes;\n                }\n                return durationInQuarters;\n            }\n        }\n        throw new Error(duration + ' is not a valid duration.');\n    };\n    return Utils;\n}());\n\n/**\n * Holds all data for a \"controller change\" MIDI event\n * @param {object} fields {controllerNumber: integer, controllerValue: integer, delta: integer}\n * @return {ControllerChangeEvent}\n */\nvar ControllerChangeEvent = /** @class */ (function () {\n    function ControllerChangeEvent(fields) {\n        this.channel = fields.channel - 1 || 0;\n        this.controllerValue = fields.controllerValue;\n        this.controllerNumber = fields.controllerNumber;\n        this.delta = fields.delta || 0x00;\n        this.name = 'ControllerChangeEvent';\n        this.status = 0xB0;\n        this.data = Utils.numberToVariableLength(fields.delta).concat(this.status | this.channel, this.controllerNumber, this.controllerValue);\n    }\n    return ControllerChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CopyrightEvent}\n */\nvar CopyrightEvent = /** @class */ (function () {\n    function CopyrightEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CopyrightEvent';\n        this.text = fields.text;\n        this.type = 0x02;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CopyrightEvent;\n}());\n\n/**\n * Object representation of a cue point meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CuePointEvent}\n */\nvar CuePointEvent = /** @class */ (function () {\n    function CuePointEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CuePointEvent';\n        this.text = fields.text;\n        this.type = 0x07;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CuePointEvent;\n}());\n\n/**\n * Object representation of a end track meta event.\n * @param {object} fields {delta: integer}\n * @return {EndTrackEvent}\n */\nvar EndTrackEvent = /** @class */ (function () {\n    function EndTrackEvent(fields) {\n        this.delta = (fields === null || fields === void 0 ? void 0 : fields.delta) || 0x00;\n        this.name = 'EndTrackEvent';\n        this.type = [0x2F, 0x00];\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type);\n    }\n    return EndTrackEvent;\n}());\n\n/**\n * Object representation of an instrument name meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {InstrumentNameEvent}\n */\nvar InstrumentNameEvent = /** @class */ (function () {\n    function InstrumentNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'InstrumentNameEvent';\n        this.text = fields.text;\n        this.type = 0x04;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return InstrumentNameEvent;\n}());\n\n/**\n * Object representation of a key signature meta event.\n * @return {KeySignatureEvent}\n */\nvar KeySignatureEvent = /** @class */ (function () {\n    function KeySignatureEvent(sf, mi) {\n        this.name = 'KeySignatureEvent';\n        this.type = 0x59;\n        var mode = mi || 0;\n        sf = sf || 0;\n        //\tFunction called with string notation\n        if (typeof mi === 'undefined') {\n            var fifths = [\n                ['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'],\n                ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']\n            ];\n            var _sflen = sf.length;\n            var note = sf || 'C';\n            if (sf[0] === sf[0].toLowerCase())\n                mode = 1;\n            if (_sflen > 1) {\n                switch (sf.charAt(_sflen - 1)) {\n                    case 'm':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '-':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case 'M':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '+':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                }\n            }\n            var fifthindex = fifths[mode].indexOf(note);\n            sf = fifthindex === -1 ? 0 : fifthindex - 7;\n        }\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x02], // Size\n        Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)\n        Utils.numberToBytes(mode, 1));\n    }\n    return KeySignatureEvent;\n}());\n\n/**\n * Object representation of a lyric meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {LyricEvent}\n */\nvar LyricEvent = /** @class */ (function () {\n    function LyricEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'LyricEvent';\n        this.text = fields.text;\n        this.type = 0x05;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return LyricEvent;\n}());\n\n/**\n * Object representation of a marker meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {MarkerEvent}\n */\nvar MarkerEvent = /** @class */ (function () {\n    function MarkerEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'MarkerEvent';\n        this.text = fields.text;\n        this.type = 0x06;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return MarkerEvent;\n}());\n\n/**\n * Holds all data for a \"note on\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOnEvent}\n */\nvar NoteOnEvent = /** @class */ (function () {\n    function NoteOnEvent(fields) {\n        this.name = 'NoteOnEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.wait = fields.wait || 0;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.delta = null;\n        this.data = fields.data;\n        this.status = 0x90;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOnEvent}\n     */\n    NoteOnEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        this.data = [];\n        // Explicitly defined startTick event\n        if (this.tick) {\n            this.tick = Utils.getRoundedIfClose(this.tick);\n            // If this is the first event in the track then use event's starting tick as delta.\n            if (track.tickPointer == 0) {\n                this.delta = this.tick;\n            }\n        }\n        else {\n            this.delta = Utils.getTickDuration(this.wait);\n            this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOnEvent;\n}());\n\n/**\n * Holds all data for a \"note off\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOffEvent}\n */\nvar NoteOffEvent = /** @class */ (function () {\n    function NoteOffEvent(fields) {\n        this.name = 'NoteOffEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.data = fields.data;\n        this.delta = fields.delta || Utils.getTickDuration(fields.duration);\n        this.status = 0x80;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOffEvent}\n     */\n    NoteOffEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        if (this.tick === null) {\n            this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOffEvent;\n}());\n\n/**\n * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.\n * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}\n * @return {NoteEvent}\n */\nvar NoteEvent = /** @class */ (function () {\n    function NoteEvent(fields) {\n        this.data = [];\n        this.name = 'NoteEvent';\n        this.pitch = Utils.toArray(fields.pitch);\n        this.channel = fields.channel || 1;\n        this.duration = fields.duration || '4';\n        this.grace = fields.grace;\n        this.repeat = fields.repeat || 1;\n        this.sequential = fields.sequential || false;\n        this.tick = fields.startTick || fields.tick || null;\n        this.velocity = fields.velocity || 50;\n        this.wait = fields.wait || 0;\n        this.tickDuration = Utils.getTickDuration(this.duration);\n        this.restDuration = Utils.getTickDuration(this.wait);\n        this.events = []; // Hold actual NoteOn/NoteOff events\n    }\n    /**\n     * Builds int array for this event.\n     * @return {NoteEvent}\n     */\n    NoteEvent.prototype.buildData = function () {\n        var _this = this;\n        // Reset data array\n        this.data = [];\n        // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same\n        if (this.grace) {\n            var graceDuration_1 = 1;\n            this.grace = Utils.toArray(this.grace);\n            this.grace.forEach(function () {\n                var noteEvent = new NoteEvent({ pitch: _this.grace, duration: 'T' + graceDuration_1 });\n                _this.data = _this.data.concat(noteEvent.data);\n            });\n        }\n        // fields.pitch could be an array of pitches.\n        // If so create note events for each and apply the same duration.\n        // By default this is a chord if it's an array of notes that requires one NoteOnEvent.\n        // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.\n        if (!this.sequential) {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                // Note on\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew;\n                    if (i == 0) {\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: _this.wait,\n                            delta: Utils.getTickDuration(_this.wait),\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    else {\n                        // Running status (can ommit the note on status)\n                        //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: 0,\n                            delta: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    _this.events.push(noteOnNew);\n                });\n                // Note off\n                this.pitch.forEach(function (p, i) {\n                    var noteOffNew;\n                    if (i == 0) {\n                        //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: _this.duration,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    else {\n                        // Running status (can omit the note off status)\n                        //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    _this.events.push(noteOffNew);\n                });\n            }\n        }\n        else {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew = new NoteOnEvent({\n                        channel: _this.channel,\n                        wait: (i > 0 ? 0 : _this.wait),\n                        delta: (i > 0 ? 0 : Utils.getTickDuration(_this.wait)),\n                        velocity: _this.velocity,\n                        pitch: p,\n                        tick: _this.tick,\n                    });\n                    var noteOffNew = new NoteOffEvent({\n                        channel: _this.channel,\n                        duration: _this.duration,\n                        velocity: _this.velocity,\n                        pitch: p,\n                    });\n                    _this.events.push(noteOnNew, noteOffNew);\n                });\n            }\n        }\n        return this;\n    };\n    return NoteEvent;\n}());\n\n/**\n * Holds all data for a \"Pitch Bend\" MIDI event\n * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]\n * @param {object} fields { bend : float, channel : int, delta: int }\n * @return {PitchBendEvent}\n */\nvar PitchBendEvent = /** @class */ (function () {\n    function PitchBendEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.name = 'PitchBendEvent';\n        this.status = 0xE0;\n        var bend14 = this.scale14bits(fields.bend);\n        var lsbValue = bend14 & 0x7f;\n        var msbValue = (bend14 >> 7) & 0x7f;\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, lsbValue, msbValue);\n    }\n    PitchBendEvent.prototype.scale14bits = function (zeroOne) {\n        if (zeroOne <= 0) {\n            return Math.floor(16384 * (zeroOne + 1) / 2);\n        }\n        return Math.floor(16383 * (zeroOne + 1) / 2);\n    };\n    return PitchBendEvent;\n}());\n\n/**\n * Holds all data for a \"program change\" MIDI event\n * @param {object} fields {instrument: integer, delta: integer}\n * @return {ProgramChangeEvent}\n */\nvar ProgramChangeEvent = /** @class */ (function () {\n    function ProgramChangeEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.instrument = fields.instrument;\n        this.status = 0xC0;\n        this.name = 'ProgramChangeEvent';\n        // delta time defaults to 0.\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, this.instrument);\n    }\n    return ProgramChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {bpm: integer, delta: integer}\n * @return {TempoEvent}\n */\nvar TempoEvent = /** @class */ (function () {\n    function TempoEvent(fields) {\n        this.bpm = fields.bpm;\n        this.delta = fields.delta || 0x00;\n        this.tick = fields.tick;\n        this.name = 'TempoEvent';\n        this.type = 0x51;\n        var tempo = Math.round(60000000 / this.bpm);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, [0x03], // Size\n        Utils.numberToBytes(tempo, 3));\n    }\n    return TempoEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TextEvent}\n */\nvar TextEvent = /** @class */ (function () {\n    function TextEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.text = fields.text;\n        this.name = 'TextEvent';\n        this.type = 0x01;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TextEvent;\n}());\n\n/**\n * Object representation of a time signature meta event.\n * @return {TimeSignatureEvent}\n */\nvar TimeSignatureEvent = /** @class */ (function () {\n    function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {\n        this.name = 'TimeSignatureEvent';\n        this.type = 0x58;\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x04], // Size\n        Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes\n        Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes\n        Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes\n        Utils.numberToBytes(notespermidiclock || 8, 1));\n    }\n    return TimeSignatureEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TrackNameEvent}\n */\nvar TrackNameEvent = /** @class */ (function () {\n    function TrackNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'TrackNameEvent';\n        this.text = fields.text;\n        this.type = 0x03;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TrackNameEvent;\n}());\n\n/**\n * Holds all data for a track.\n * @param {object} fields {type: number, data: array, size: array, events: array}\n * @return {Track}\n */\nvar Track = /** @class */ (function () {\n    function Track() {\n        this.type = Constants.TRACK_CHUNK_TYPE;\n        this.data = [];\n        this.size = [];\n        this.events = [];\n        this.explicitTickEvents = [];\n        // If there are any events with an explicit tick defined then we will create a \"sub\" track for those\n        // and merge them in and the end.\n        this.tickPointer = 0; // Each time an event is added this will increase\n    }\n    /**\n     * Adds any event type to the track.\n     * Events without a specific startTick property are assumed to be added in order of how they should output.\n     * Events with a specific startTick property are set aside for now will be merged in during build process.\n     *\n     * TODO: Don't put startTick events in their own array.  Just lump everything together and sort it out during buildData();\n     * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.\n     * @param {Function} mapFunction - Callback which can be used to apply specific properties to all events.\n     * @return {Track}\n     */\n    Track.prototype.addEvent = function (events, mapFunction) {\n        var _this = this;\n        Utils.toArray(events).forEach(function (event, i) {\n            if (event instanceof NoteEvent) {\n                // Handle map function if provided\n                if (typeof mapFunction === 'function') {\n                    var properties = mapFunction(i, event);\n                    if (typeof properties === 'object') {\n                        Object.assign(event, properties);\n                    }\n                }\n                // If this note event has an explicit startTick then we need to set aside for now\n                if (event.tick !== null) {\n                    _this.explicitTickEvents.push(event);\n                }\n                else {\n                    // Push each on/off event to track's event stack\n                    event.buildData().events.forEach(function (e) { return _this.events.push(e); });\n                }\n            }\n            else {\n                _this.events.push(event);\n            }\n        });\n        return this;\n    };\n    /**\n     * Builds int array of all events.\n     * @param {object} options\n     * @return {Track}\n     */\n    Track.prototype.buildData = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Reset\n        this.data = [];\n        this.size = [];\n        this.tickPointer = 0;\n        var precisionLoss = 0;\n        this.events.forEach(function (event) {\n            // Build event & add to total tick duration\n            if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {\n                var built = event.buildData(_this, precisionLoss, options);\n                precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);\n                _this.data = _this.data.concat(built.data);\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n            }\n            else if (event instanceof TempoEvent) {\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n                _this.data = _this.data.concat(event.data);\n            }\n            else {\n                _this.data = _this.data.concat(event.data);\n            }\n        });\n        this.mergeExplicitTickEvents();\n        // If the last event isn't EndTrackEvent, then tack it onto the data.\n        if (!this.events.length || !(this.events[this.events.length - 1] instanceof EndTrackEvent)) {\n            this.data = this.data.concat((new EndTrackEvent).data);\n        }\n        this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long\n        return this;\n    };\n    Track.prototype.mergeExplicitTickEvents = function () {\n        var _this = this;\n        if (!this.explicitTickEvents.length)\n            return;\n        // First sort asc list of events by startTick\n        this.explicitTickEvents.sort(function (a, b) { return a.tick - b.tick; });\n        // Now this.explicitTickEvents is in correct order, and so is this.events naturally.\n        // For each explicit tick event, splice it into the main list of events and\n        // adjust the delta on the following events so they still play normally.\n        this.explicitTickEvents.forEach(function (noteEvent) {\n            // Convert NoteEvent to it's respective NoteOn/NoteOff events\n            // Note that as we splice in events the delta for the NoteOff ones will\n            // Need to change based on what comes before them after the splice.\n            noteEvent.buildData().events.forEach(function (e) { return e.buildData(_this); });\n            // Merge each event individually into this track's event list.\n            noteEvent.events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        });\n        // Hacky way to rebuild track with newly spliced events.  Need better solution.\n        this.explicitTickEvents = [];\n        this.buildData();\n    };\n    /**\n     * Merges another track's events with this track.\n     * @param {Track} track\n     * @return {Track}\n     */\n    Track.prototype.mergeTrack = function (track) {\n        var _this = this;\n        // First build this track to populate each event's tick property\n        this.buildData();\n        // Then build track to be merged so that tick property is populated on all events & merge each event.\n        track.buildData().events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        return this;\n    };\n    /**\n     * Merges a single event into this track's list of events based on event.tick property.\n     * @param {AbstractEvent} - event\n     * @return {Track}\n     */\n    Track.prototype.mergeSingleEvent = function (event) {\n        // There are no events yet, so just add it in.\n        if (!this.events.length) {\n            this.addEvent(event);\n            return;\n        }\n        // Find index of existing event we need to follow with\n        var lastEventIndex;\n        for (var i = 0; i < this.events.length; i++) {\n            if (this.events[i].tick > event.tick)\n                break;\n            lastEventIndex = i;\n        }\n        var splicedEventIndex = lastEventIndex + 1;\n        // Need to adjust the delta of this event to ensure it falls on the correct tick.\n        event.delta = event.tick - this.events[lastEventIndex].tick;\n        // Splice this event at lastEventIndex + 1\n        this.events.splice(splicedEventIndex, 0, event);\n        // Now adjust delta of all following events\n        for (var i = splicedEventIndex + 1; i < this.events.length; i++) {\n            // Since each existing event should have a tick value at this point we just need to\n            // adjust delta to that the event still falls on the correct tick.\n            this.events[i].delta = this.events[i].tick - this.events[i - 1].tick;\n        }\n    };\n    /**\n     * Removes all events matching specified type.\n     * @param {string} eventName - Event type\n     * @return {Track}\n     */\n    Track.prototype.removeEventsByName = function (eventName) {\n        var _this = this;\n        this.events.forEach(function (event, index) {\n            if (event.name === eventName) {\n                _this.events.splice(index, 1);\n            }\n        });\n        return this;\n    };\n    /**\n     * Sets tempo of the MIDI file.\n     * @param {number} bpm - Tempo in beats per minute.\n     * @param {number} tick - Start tick.\n     * @return {Track}\n     */\n    Track.prototype.setTempo = function (bpm, tick) {\n        if (tick === void 0) { tick = 0; }\n        return this.addEvent(new TempoEvent({ bpm: bpm, tick: tick }));\n    };\n    /**\n     * Sets time signature.\n     * @param {number} numerator - Top number of the time signature.\n     * @param {number} denominator - Bottom number of the time signature.\n     * @param {number} midiclockspertick - Defaults to 24.\n     * @param {number} notespermidiclock - Defaults to 8.\n     * @return {Track}\n     */\n    Track.prototype.setTimeSignature = function (numerator, denominator, midiclockspertick, notespermidiclock) {\n        return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));\n    };\n    /**\n     * Sets key signature.\n     * @param {*} sf -\n     * @param {*} mi -\n     * @return {Track}\n     */\n    Track.prototype.setKeySignature = function (sf, mi) {\n        return this.addEvent(new KeySignatureEvent(sf, mi));\n    };\n    /**\n     * Adds text to MIDI file.\n     * @param {string} text - Text to add.\n     * @return {Track}\n     */\n    Track.prototype.addText = function (text) {\n        return this.addEvent(new TextEvent({ text: text }));\n    };\n    /**\n     * Adds copyright to MIDI file.\n     * @param {string} text - Text of copyright line.\n     * @return {Track}\n     */\n    Track.prototype.addCopyright = function (text) {\n        return this.addEvent(new CopyrightEvent({ text: text }));\n    };\n    /**\n     * Adds Sequence/Track Name.\n     * @param {string} text - Text of track name.\n     * @return {Track}\n     */\n    Track.prototype.addTrackName = function (text) {\n        return this.addEvent(new TrackNameEvent({ text: text }));\n    };\n    /**\n     * Sets instrument name of track.\n     * @param {string} text - Name of instrument.\n     * @return {Track}\n     */\n    Track.prototype.addInstrumentName = function (text) {\n        return this.addEvent(new InstrumentNameEvent({ text: text }));\n    };\n    /**\n     * Adds marker to MIDI file.\n     * @param {string} text - Marker text.\n     * @return {Track}\n     */\n    Track.prototype.addMarker = function (text) {\n        return this.addEvent(new MarkerEvent({ text: text }));\n    };\n    /**\n     * Adds cue point to MIDI file.\n     * @param {string} text - Text of cue point.\n     * @return {Track}\n     */\n    Track.prototype.addCuePoint = function (text) {\n        return this.addEvent(new CuePointEvent({ text: text }));\n    };\n    /**\n     * Adds lyric to MIDI file.\n     * @param {string} text - Lyric text to add.\n     * @return {Track}\n     */\n    Track.prototype.addLyric = function (text) {\n        return this.addEvent(new LyricEvent({ text: text }));\n    };\n    /**\n     * Channel mode messages\n     * @return {Track}\n     */\n    Track.prototype.polyModeOn = function () {\n        var event = new NoteOnEvent({ data: [0x00, 0xB0, 0x7E, 0x00] });\n        return this.addEvent(event);\n    };\n    /**\n     * Sets a pitch bend.\n     * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.\n     * @return {Track}\n     */\n    Track.prototype.setPitchBend = function (bend) {\n        return this.addEvent(new PitchBendEvent({ bend: bend }));\n    };\n    /**\n     * Adds a controller change event\n     * @param {number} number - Control number.\n     * @param {number} value - Control value.\n     * @param {number} channel - Channel to send controller change event on (1-based).\n     * @param {number} delta - Track tick offset for cc event.\n     * @return {Track}\n     */\n    Track.prototype.controllerChange = function (number, value, channel, delta) {\n        return this.addEvent(new ControllerChangeEvent({ controllerNumber: number, controllerValue: value, channel: channel, delta: delta }));\n    };\n    return Track;\n}());\n\nvar VexFlow = /** @class */ (function () {\n    function VexFlow() {\n    }\n    /**\n     * Support for converting VexFlow voice into MidiWriterJS track\n     * @return MidiWriter.Track object\n     */\n    VexFlow.prototype.trackFromVoice = function (voice, options) {\n        var _this = this;\n        if (options === void 0) { options = { addRenderedAccidentals: false }; }\n        var track = new Track;\n        var wait = [];\n        voice.tickables.forEach(function (tickable) {\n            if (tickable.noteType === 'n') {\n                track.addEvent(new NoteEvent({\n                    pitch: tickable.keys.map(function (pitch, index) { return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals); }),\n                    duration: _this.convertDuration(tickable),\n                    wait: wait\n                }));\n                // reset wait\n                wait = [];\n            }\n            else if (tickable.noteType === 'r') {\n                // move on to the next tickable and add this to the stack\n                // of the `wait` property for the next note event\n                wait.push(_this.convertDuration(tickable));\n            }\n        });\n        // There may be outstanding rests at the end of the track,\n        // pad with a ghost note (zero duration and velocity), just to capture the wait.\n        if (wait.length > 0) {\n            track.addEvent(new NoteEvent({ pitch: '[c4]', duration: '0', wait: wait, velocity: '0' }));\n        }\n        return track;\n    };\n    /**\n     * Converts VexFlow pitch syntax to MidiWriterJS syntax\n     * @param pitch string\n     * @param index pitch index\n     * @param note struct from Vexflow\n     * @param addRenderedAccidentals adds Vexflow rendered accidentals\n     */\n    VexFlow.prototype.convertPitch = function (pitch, index, note, addRenderedAccidentals) {\n        var _a;\n        if (addRenderedAccidentals === void 0) { addRenderedAccidentals = false; }\n        // Splits note name from octave\n        var pitchParts = pitch.split('/');\n        // Retrieves accidentals from pitch\n        // Removes natural accidentals since they are not accepted in Tonal Midi\n        var accidentals = pitchParts[0].substring(1).replace('n', '');\n        if (addRenderedAccidentals) {\n            (_a = note.getAccidentals()) === null || _a === void 0 ? void 0 : _a.forEach(function (accidental) {\n                if (accidental.index === index) {\n                    if (accidental.type === 'n') {\n                        accidentals = '';\n                    }\n                    else {\n                        accidentals += accidental.type;\n                    }\n                }\n            });\n        }\n        return pitchParts[0][0] + accidentals + pitchParts[1];\n    };\n    /**\n     * Converts VexFlow duration syntax to MidiWriterJS syntax\n     * @param note struct from VexFlow\n     */\n    VexFlow.prototype.convertDuration = function (note) {\n        return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');\n    };\n    /**\n     * Converts VexFlow base duration syntax to MidiWriterJS syntax\n     * @param duration Vexflow duration\n     * @returns MidiWriterJS duration\n     */\n    VexFlow.prototype.convertBaseDuration = function (duration) {\n        switch (duration) {\n            case 'w':\n                return '1';\n            case 'h':\n                return '2';\n            case 'q':\n                return '4';\n            default:\n                return duration;\n        }\n    };\n    return VexFlow;\n}());\n\n/**\n * Object representation of a header chunk section of a MIDI file.\n * @param {number} numberOfTracks - Number of tracks\n * @return {Header}\n */\nvar Header = /** @class */ (function () {\n    function Header(numberOfTracks) {\n        this.type = Constants.HEADER_CHUNK_TYPE;\n        var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;\n        this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,\n        Constants.HEADER_CHUNK_DIVISION);\n        this.size = [0, 0, 0, this.data.length];\n    }\n    return Header;\n}());\n\n/**\n * Object that puts together tracks and provides methods for file output.\n * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.\n * @param {object} options - {middleC: 'C4'}\n * @return {Writer}\n */\nvar Writer = /** @class */ (function () {\n    function Writer(tracks, options) {\n        if (options === void 0) { options = {}; }\n        // Ensure tracks is an array\n        this.tracks = Utils.toArray(tracks);\n        this.options = options;\n    }\n    /**\n     * Builds array of data from chunkschunks.\n     * @return {array}\n     */\n    Writer.prototype.buildData = function () {\n        var _this = this;\n        var data = [];\n        data.push(new Header(this.tracks.length));\n        // For each track add final end of track event and build data\n        this.tracks.forEach(function (track) {\n            data.push(track.buildData(_this.options));\n        });\n        return data;\n    };\n    /**\n     * Builds the file into a Uint8Array\n     * @return {Uint8Array}\n     */\n    Writer.prototype.buildFile = function () {\n        var build = [];\n        // Data consists of chunks which consists of data\n        this.buildData().forEach(function (d) { return build = build.concat(d.type, d.size, d.data); });\n        return new Uint8Array(build);\n    };\n    /**\n     * Convert file buffer to a base64 string.  Different methods depending on if browser or node.\n     * @return {string}\n     */\n    Writer.prototype.base64 = function () {\n        if (typeof btoa === 'function') {\n            var binary = '';\n            var bytes = this.buildFile();\n            var len = bytes.byteLength;\n            for (var i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        }\n        return Buffer.from(this.buildFile()).toString('base64');\n    };\n    /**\n     * Get the data URI.\n     * @return {string}\n     */\n    Writer.prototype.dataUri = function () {\n        return 'data:audio/midi;base64,' + this.base64();\n    };\n    /**\n     * Set option on instantiated Writer.\n     * @param {string} key\n     * @param {any} value\n     * @return {Writer}\n     */\n    Writer.prototype.setOption = function (key, value) {\n        this.options[key] = value;\n        return this;\n    };\n    /**\n     * Output to stdout\n     * @return {string}\n     */\n    Writer.prototype.stdout = function () {\n        return process.stdout.write(Buffer.from(this.buildFile()));\n    };\n    return Writer;\n}());\n\nvar main = {\n    Constants: Constants,\n    ControllerChangeEvent: ControllerChangeEvent,\n    CopyrightEvent: CopyrightEvent,\n    CuePointEvent: CuePointEvent,\n    EndTrackEvent: EndTrackEvent,\n    InstrumentNameEvent: InstrumentNameEvent,\n    KeySignatureEvent: KeySignatureEvent,\n    LyricEvent: LyricEvent,\n    MarkerEvent: MarkerEvent,\n    NoteOnEvent: NoteOnEvent,\n    NoteOffEvent: NoteOffEvent,\n    NoteEvent: NoteEvent,\n    PitchBendEvent: PitchBendEvent,\n    ProgramChangeEvent: ProgramChangeEvent,\n    TempoEvent: TempoEvent,\n    TextEvent: TextEvent,\n    TimeSignatureEvent: TimeSignatureEvent,\n    Track: Track,\n    TrackNameEvent: TrackNameEvent,\n    Utils: Utils,\n    VexFlow: VexFlow,\n    Writer: Writer\n};\n\nmodule.exports = main;\n", "// src/main.ts\r\nimport midiWriterJs from 'midi-writer-js';\r\n\r\n// --- Constants and Helper Functions ---\r\nconst NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\nconst INTERVALS = { P1: 0, m2: 1, M2: 2, m3: 3, M3: 4, P4: 5, A4: 6, d5: 6, P5: 7, A5: 8, m6: 8, M6: 9, d7: 9, m7: 10, M7: 11, P8: 12, m9: 13, M9: 14, P11: 17, M13: 21 };\r\nconst CHORD_FORMULAS: Record<string, number[]> = {\r\n    '': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5], 'maj': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5], 'm': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5], 'min': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5], 'dim': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5], 'aug': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5], 'sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5], 'sus2': [INTERVALS.P1, INTERVALS.M2, INTERVALS.P5], '7': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7], 'maj7': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7], 'm7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7], 'm(maj7)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7], 'dim7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5, INTERVALS.d7], 'm7b5': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5, INTERVALS.m7], '9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], 'maj9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], 'm9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], '11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.P11], 'm11': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.P11], '13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], 'maj13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.M13], 'm13': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13],\r\n}; // Note: Added Record<string, number[]> type annotation\r\n\r\nfunction normalizeNoteName(note: string): string {\r\n    const name = note.toUpperCase();\r\n    switch (name) {\r\n        case 'DB': return 'C#'; case 'EB': return 'D#'; case 'FB': return 'E'; case 'GB': return 'F#'; case 'AB': return 'G#'; case 'BB': return 'A#'; case 'E#': return 'F'; case 'B#': return 'C'; default: return name;\r\n    }\r\n}\r\n\r\nfunction getNoteIndex(note: string): number {\r\n    const normalizedNote = normalizeNoteName(note);\r\n    const index = NOTES.indexOf(normalizedNote);\r\n    if (index === -1) throw new Error(`Invalid note name: ${note}`);\r\n    return index;\r\n}\r\n\r\nfunction getMidiNote(noteName: string, octave: number): number {\r\n    const noteIndex = getNoteIndex(noteName);\r\n    const midiVal = 12 * (octave + 1) + noteIndex; // C4 = 60\r\n     if (midiVal < 0 || midiVal > 127) {\r\n         console.warn(`Calculated MIDI note ${midiVal} for ${noteName}${octave} is out of range (0-127).`);\r\n     }\r\n    return midiVal;\r\n}\r\n\r\n// --- Main Function to Setup Form Interaction ---\r\n\r\nfunction setupMidiForm() {\r\n    const form = document.getElementById('midiForm') as HTMLFormElement | null;\r\n    const statusDiv = document.getElementById('status');\r\n    const velocitySlider = document.getElementById('velocity') as HTMLInputElement | null;\r\n    const velocityValueSpan = document.getElementById('velocityValue');\r\n\r\n    if (!form || !statusDiv || !velocitySlider || !velocityValueSpan) {\r\n        console.error(\"Form elements not found!\");\r\n        if (statusDiv) statusDiv.textContent = \"Error: Could not find necessary HTML elements.\";\r\n        return;\r\n    }\r\n\r\n    // Update velocity display\r\n    velocitySlider.addEventListener('input', (event) => {\r\n        velocityValueSpan.textContent = (event.target as HTMLInputElement).value;\r\n    });\r\n\r\n    form.addEventListener('submit', (event) => {\r\n        event.preventDefault(); // Prevent actual form submission\r\n        statusDiv.textContent = 'Generating MIDI...';\r\n        statusDiv.classList.remove('text-red-600', 'text-green-600');\r\n        statusDiv.classList.add('text-gray-600');\r\n\r\n        try {\r\n            // 1. Get form data\r\n            const formData = new FormData(form);\r\n            const progressionString = formData.get('progression') as string;\r\n            const outputFileName = formData.get('outputFileName') as string || 'progression'; // Default name part\r\n            const addBassNote = formData.has('addBassNote');\r\n            const doInversion = formData.has('doInversion');\r\n            const baseOctave = parseInt(formData.get('baseOctave') as string, 10);\r\n            const chordDuration = formData.get('chordDuration') as string;\r\n            const tempo = parseInt(formData.get('tempo') as string, 10);\r\n            const velocity = parseInt(formData.get('velocity') as string, 10);\r\n\r\n            if (!progressionString || progressionString.trim() === '') {\r\n                 throw new Error(\"Chord progression cannot be empty.\");\r\n            }\r\n\r\n            // Ensure filename ends with .mid\r\n            const finalFileName = outputFileName.endsWith('.mid') ? outputFileName : `${outputFileName}.mid`;\r\n\r\n            // 2. Generate MIDI Track\r\n            const track = new midiWriterJs.Track();\r\n            track.setTempo(tempo);\r\n            track.setTimeSignature(4, 4, 24, 8); \r\n            \r\n            const chordSymbols = progressionString.trim().split(/\\s+/);\r\n            const chordRegex = /^([A-G][#b]?)(.*)$/;\r\n\r\n            for (const symbol of chordSymbols) {\r\n                if (!symbol) continue;\r\n                const match = symbol.match(chordRegex);\r\n\r\n                if (!match) {\r\n                    console.warn(`Could not parse chord symbol: \"${symbol}\". Skipping.`);\r\n                    track.addEvent(new midiWriterJs.NoteEvent({ pitch: [], wait: chordDuration, duration: chordDuration, velocity: 0 }));\r\n                    continue;\r\n                }\r\n\r\n                const rootNoteName = match[1];\r\n                const qualityAndExtensions = match[2];\r\n\r\n                try {\r\n                    const rootMidi = getMidiNote(rootNoteName, baseOctave);\r\n                    let formulaIntervals = CHORD_FORMULAS[qualityAndExtensions];\r\n                    if (formulaIntervals === undefined) {\r\n                         if (qualityAndExtensions === '') { formulaIntervals = CHORD_FORMULAS['']; }\r\n                         else { console.warn(`Chord quality \"${qualityAndExtensions}\" not found for \"${symbol}\". Defaulting to major triad.`); formulaIntervals = CHORD_FORMULAS['']; }\r\n                    }\r\n\r\n                    let chordMidiNotes = formulaIntervals.map(intervalSemitones => rootMidi + intervalSemitones);\r\n\r\n                    if (doInversion && chordMidiNotes.length > 1) {\r\n                        chordMidiNotes.sort((a, b) => a - b);\r\n                        const lowestNote = chordMidiNotes.shift();\r\n                        if (lowestNote !== undefined) { chordMidiNotes.push(lowestNote + 12); }\r\n                         chordMidiNotes.sort((a, b) => a - b);\r\n                    }\r\n\r\n                    let eventNotes = [...chordMidiNotes];\r\n\r\n                    if (addBassNote) {\r\n                        const bassNoteMidi = rootMidi - 12;\r\n                        if (!eventNotes.length || bassNoteMidi < Math.min(...eventNotes)) {\r\n                             if(bassNoteMidi >= 0) { eventNotes.unshift(bassNoteMidi); }\r\n                             else { console.warn(`Calculated bass note ${bassNoteMidi} for ${symbol} is below MIDI range 0. Skipping bass note.`); }\r\n                        }\r\n                    }\r\n\r\n                    eventNotes = eventNotes.filter(note => note >= 0 && note <= 127);\r\n                    eventNotes = [...new Set(eventNotes)]; // Remove duplicates\r\n\r\n                    if (eventNotes.length > 0) {\r\n                        track.addEvent(new midiWriterJs.NoteEvent({\r\n                            pitch: eventNotes,\r\n                            duration: chordDuration,\r\n                            velocity: velocity\r\n                        }));\r\n                    } else {\r\n                        console.warn(`No valid MIDI notes generated for chord \"${symbol}\". Adding rest.`);\r\n                        track.addEvent(new midiWriterJs.NoteEvent({ pitch: [], wait: chordDuration, duration: chordDuration, velocity: 0 }));\r\n                    }\r\n\r\n                } catch (error: any) { // Catch specific chord processing errors\r\n                     console.error(`Error processing chord \"${symbol}\" for MIDI: ${error.message}. Adding rest.`);\r\n                     statusDiv.textContent = `Error processing chord \"${symbol}\": ${error.message}`;\r\n                     statusDiv.classList.replace('text-gray-600','text-red-600');\r\n                     track.addEvent(new midiWriterJs.NoteEvent({ pitch: [], wait: chordDuration, duration: chordDuration, velocity: 0 }));\r\n                }\r\n            } // End chord loop\r\n\r\n\r\n            // 3. Generate MIDI Data and Trigger Download\r\n            const writer = new midiWriterJs.Writer([track]);\r\n            const midiData = writer.buildFile(); // Get Uint8Array\r\n\r\n            const blob = new Blob([midiData], { type: 'audio/midi' });\r\n            const url = URL.createObjectURL(blob);\r\n\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = finalFileName;\r\n\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            URL.revokeObjectURL(url);\r\n\r\n            statusDiv.textContent = `MIDI file \"${finalFileName}\" prepared for download!`;\r\n            statusDiv.classList.replace('text-gray-600','text-green-600');\r\n\r\n        } catch (error: any) { // Catch general errors (e.g., empty progression)\r\n             console.error('Error generating MIDI:', error);\r\n             statusDiv.textContent = `Error: ${error.message}`;\r\n             statusDiv.classList.replace('text-gray-600','text-red-600');\r\n        }\r\n    });\r\n}\r\n\r\n// --- Run Setup after DOM is loaded ---\r\nif (document.readyState === 'loading') { // Loading hasn't finished yet\r\n    document.addEventListener('DOMContentLoaded', setupMidiForm);\r\n} else { // `DOMContentLoaded` has already fired\r\n    setupMidiForm();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAMA,UAAI,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,mBAAmB,CAAC,IAAM,IAAM,KAAM,GAAI;AAAA,QAC1C,qBAAqB,CAAC,GAAM,GAAM,GAAM,CAAI;AAAA,QAC5C,sBAAsB,CAAC,GAAM,CAAI;AAAA,QACjC,sBAAsB,CAAC,GAAM,CAAI;AAAA,QACjC,uBAAuB,CAAC,GAAM,GAAI;AAAA,QAClC,kBAAkB,CAAC,IAAM,IAAM,KAAM,GAAI;AAAA,QACzC,eAAe;AAAA,QACf,mBAAmB;AAAA,MACvB;AAGA,UAAI,UAAU,CAAC,GAAG,MAAM,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;AAGrD,eAAS,QAAQ,KAAK;AACpB,eAAO,QAAQ,QAAQ,OAAO,QAAQ,YAAY,OAAO,IAAI,SAAS,WAAW,OAAO;AAAA,MAC1F;AAGA,eAAS,QAAQ,OAAO;AACtB,eAAO,UAAU,QAAQ,OAAO,UAAU,YAAY,OAAO,MAAM,SAAS,YAAY,OAAO,MAAM,QAAQ,WAAW,OAAO;AAAA,MACjI;AACA,UAAI,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAClC,UAAI,gBAAgB,OAAO;AAAA,QACzB,CAAC,WAAW,KAAK,MAAM,SAAS,IAAI,EAAE;AAAA,MACxC;AACA,eAAS,OAAO,OAAO;AACrB,cAAM,EAAE,MAAM,KAAK,KAAK,MAAM,EAAE,IAAI;AACpC,cAAM,IAAI,OAAO,IAAI,IAAI,IAAI;AAC7B,YAAI,QAAQ,QAAQ;AAClB,iBAAO,CAAC,MAAM,CAAC;AAAA,QACjB;AACA,cAAM,IAAI,MAAM,cAAc,IAAI,IAAI,IAAI;AAC1C,eAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,MAC1B;AAGA,UAAI,SAAS,EAAE,OAAO,MAAM,MAAM,IAAI,IAAI,IAAI,KAAK,GAAG;AACtD,UAAI,QAAwB,oBAAI,IAAI;AACpC,UAAI,eAAe,CAAC,SAAS,UAAU,OAAO,IAAI;AAClD,UAAI,WAAW,CAAC,QAAQ,MAAM,IAAI,QAAQ,KAAK,CAAC,GAAG,IAAI,QAAQ,KAAK,GAAG;AACvE,UAAI,WAAW,CAAC,QAAQ,IAAI,CAAC,MAAM,MAAM,CAAC,IAAI,SAAS,IAAI;AAC3D,eAAS,KAAK,KAAK;AACjB,cAAM,YAAY,KAAK,UAAU,GAAG;AACpC,cAAM,SAAS,MAAM,IAAI,SAAS;AAClC,YAAI,QAAQ;AACV,iBAAO;AAAA,QACT;AACA,cAAM,QAAQ,OAAO,QAAQ,WAAW,MAAM,GAAG,IAAI,QAAQ,GAAG,IAAI,KAAK,UAAU,GAAG,CAAC,IAAI,QAAQ,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI;AAC3H,cAAM,IAAI,WAAW,KAAK;AAC1B,eAAO;AAAA,MACT;AACA,UAAI,QAAQ;AACZ,eAAS,aAAa,KAAK;AACzB,cAAM,IAAI,MAAM,KAAK,GAAG;AACxB,eAAO,CAAC,EAAE,CAAC,EAAE,YAAY,GAAG,EAAE,CAAC,EAAE,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,MAClE;AACA,UAAI,MAAM,CAAC,GAAG,OAAO,IAAI,IAAI,KAAK;AAClC,UAAI,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAChC,eAAS,MAAM,UAAU;AACvB,cAAM,SAAS,aAAa,QAAQ;AACpC,YAAI,OAAO,CAAC,MAAM,MAAM,OAAO,CAAC,MAAM,IAAI;AACxC,iBAAO;AAAA,QACT;AACA,cAAM,SAAS,OAAO,CAAC;AACvB,cAAM,MAAM,OAAO,CAAC;AACpB,cAAM,SAAS,OAAO,CAAC;AACvB,cAAM,QAAQ,OAAO,WAAW,CAAC,IAAI,KAAK;AAC1C,cAAM,MAAM,SAAS,GAAG;AACxB,cAAM,MAAM,OAAO,SAAS,CAAC,SAAS;AACtC,cAAM,QAAQ,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;AACvC,cAAM,OAAO,SAAS,MAAM;AAC5B,cAAM,KAAK,SAAS;AACpB,cAAM,UAAU,KAAK,IAAI,IAAI,MAAM,OAAO;AAC1C,cAAM,SAAS,QAAQ,SAAS,IAAI,KAAK,IAAI,IAAI,KAAK,EAAE,IAAI,KAAK,KAAK,KAAK,IAAI,IAAI,MAAM,MAAM,MAAM;AACrG,cAAM,OAAO,UAAU,KAAK,UAAU,MAAM,SAAS;AACrD,cAAM,OAAO,QAAQ,SAAS,OAAO,KAAK,IAAI,IAAI,SAAS,MAAM,EAAE,IAAI;AACvE,eAAO;AAAA,UACL,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,eAAS,UAAU,OAAO;AACxB,cAAM,EAAE,MAAM,KAAK,IAAI,IAAI;AAC3B,cAAM,SAAS,aAAa,IAAI;AAChC,YAAI,CAAC,QAAQ;AACX,iBAAO;AAAA,QACT;AACA,cAAM,KAAK,SAAS,SAAS,GAAG;AAChC,eAAO,OAAO,QAAQ,IAAI,KAAK,MAAM;AAAA,MACvC;AAGA,eAAS,OAAO,KAAK;AACnB,eAAO,CAAC,OAAO,KAAK,CAAC,OAAO;AAAA,MAC9B;AACA,eAAS,OAAO,QAAQ;AACtB,YAAI,OAAO,MAAM,GAAG;AAClB,iBAAO,CAAC;AAAA,QACV;AACA,cAAM,IAAI,KAAK,MAAM;AACrB,eAAO,EAAE,QAAQ,OAAO,EAAE;AAAA,MAC5B;AAKA,UAAI;AAAA;AAAA,QAAuB,WAAY;AACnC,mBAASA,SAAQ;AAAA,UACjB;AAKA,UAAAA,OAAM,UAAU,WAAY;AACxB,mBAAO,UAAU;AAAA,UACrB;AAMA,UAAAA,OAAM,gBAAgB,SAAU,QAAQ;AACpC,mBAAO,OAAO,MAAM,EAAE,EAAE,IAAI,SAAU,MAAM;AAAE,qBAAO,KAAK,WAAW,CAAC;AAAA,YAAG,CAAC;AAAA,UAC9E;AAOA,UAAAA,OAAM,YAAY,SAAU,GAAG;AAC3B,mBAAO,CAAC,MAAM,WAAW,CAAC,CAAC,KAAK,SAAS,CAAC;AAAA,UAC9C;AAQA,UAAAA,OAAM,WAAW,SAAU,OAAO,SAAS;AACvC,gBAAI,YAAY,QAAQ;AAAE,wBAAU;AAAA,YAAM;AAC1C,mBAAO,KAAK,OAAO,OAAO,IAAI,OAAO,KAAK;AAAA,UAC9C;AAUA,UAAAA,OAAM,yBAAyB,SAAU,OAAO;AAC5C,oBAAQ,KAAK,MAAM,KAAK;AACxB,gBAAI,SAAS,QAAQ;AAErB,mBAAO,QAAQ,SAAS,GAAG;AACvB,yBAAW;AACX,wBAAY,QAAQ,MAAQ;AAAA,YAChC;AACA,gBAAI,QAAQ,CAAC;AAEb,mBAAO,MAAM;AACT,oBAAM,KAAK,SAAS,GAAI;AACxB,kBAAI,SAAS;AACT,2BAAW;AAAA,mBACV;AACD;AAAA,cACJ;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AAMA,UAAAA,OAAM,kBAAkB,SAAU,GAAG;AACjC,mBAAO,UAAU,CAAC,EAAE,MAAM,OAAO,EAAE,SAAS;AAAA,UAChD;AAMA,UAAAA,OAAM,kBAAkB,SAAU,OAAO;AACrC,gBAAI,MAAM;AACV,gBAAI;AACJ,kBAAM,QAAQ,SAAU,MAAM;AAC1B,6BAAe,KAAK,SAAS,EAAE;AAE/B,kBAAI,aAAa,UAAU;AACvB,+BAAe,MAAM;AACzB,qBAAO;AAAA,YACX,CAAC;AACD,mBAAO,SAAS,KAAK,EAAE;AAAA,UAC3B;AAOA,UAAAA,OAAM,gBAAgB,SAAU,QAAQ,aAAa;AACjD,0BAAc,eAAe;AAC7B,gBAAI,YAAY,OAAO,SAAS,EAAE;AAClC,gBAAI,UAAU,SAAS,GAAG;AACtB,0BAAY,MAAM;AAAA,YACtB;AAEA,gBAAI,WAAW,UAAU,MAAM,OAAO;AAEtC,gBAAI,WAAW,SAAS,IAAI,SAAU,MAAM;AAAE,qBAAO,SAAS,MAAM,EAAE;AAAA,YAAG,CAAC;AAE1E,gBAAI,SAAS,SAAS,aAAa;AAC/B,qBAAO,cAAc,SAAS,SAAS,GAAG;AACtC,yBAAS,QAAQ,CAAC;AAAA,cACtB;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AAOA,UAAAA,OAAM,UAAU,SAAU,OAAO;AAC7B,gBAAI,MAAM,QAAQ,KAAK;AACnB,qBAAO;AACX,mBAAO,CAAC,KAAK;AAAA,UACjB;AAMA,UAAAA,OAAM,kBAAkB,SAAU,UAAU;AAExC,uBAAW,WAAW,MAAM,MAAM;AAClC,mBAAO,KAAK,MAAM,WAAW,MAAM,GAAG;AAAA,UAC1C;AAOA,UAAAA,OAAM,kBAAkB,SAAU,UAAU;AACxC,gBAAI,MAAM,QAAQ,QAAQ,GAAG;AAEzB,qBAAO,SAAS,IAAI,SAAU,OAAO;AACjC,uBAAOA,OAAM,gBAAgB,KAAK;AAAA,cACtC,CAAC,EAAE,OAAO,SAAU,GAAG,GAAG;AACtB,uBAAO,IAAI;AAAA,cACf,GAAG,CAAC;AAAA,YACR;AACA,uBAAW,SAAS,SAAS;AAC7B,gBAAI,SAAS,YAAY,EAAE,OAAO,CAAC,MAAM,KAAK;AAE1C,kBAAI,QAAQ,SAAS,SAAS,UAAU,CAAC,CAAC;AAC1C,kBAAI,MAAM,KAAK,KAAK,QAAQ,GAAG;AAC3B,sBAAM,IAAI,MAAM,WAAW,2BAA2B;AAAA,cAC1D;AACA,qBAAO;AAAA,YACX;AAEA,gBAAI,eAAeA,OAAM,gBAAgB,UAAU,qBAAqB;AACxE,gBAAI,eAAe,eAAeA,OAAM,sBAAsB,QAAQ;AACtE,mBAAOA,OAAM,kBAAkB,YAAY;AAAA,UAC/C;AASA,UAAAA,OAAM,oBAAoB,SAAU,MAAM;AACtC,gBAAI,cAAc,KAAK,MAAM,IAAI;AACjC,mBAAO,KAAK,IAAI,cAAc,IAAI,IAAI,OAAW,cAAc;AAAA,UACnE;AAUA,UAAAA,OAAM,mBAAmB,SAAU,MAAM;AACrC,gBAAI,cAAc,KAAK,MAAM,IAAI;AACjC,mBAAO,cAAc;AAAA,UACzB;AAOA,UAAAA,OAAM,wBAAwB,SAAU,UAAU;AAG9C,gBAAI,aAAa;AACb,qBAAO;AACX,gBAAI,QAAQ,SAAS,MAAM,iDAAiD;AAC5E,gBAAI,OAAO;AACP,kBAAI,OAAO,OAAO,MAAM,OAAO,IAAI;AAEnC,kBAAI,cAAc,SAAS,MAAO,OAAQ,OAAO,OAAQ;AACzD,kBAAI,aAAa;AAEb,oBAAI,QAAQ,OAAO;AACnB,oBAAI,qBAAqB,IAAI;AAC7B,oBAAI,KAAK,MAAM,QAAQ,SAAS,GAAG,QAAQ,SAAS,GAAG;AACvD,oBAAI,QAAQ;AACR,sBAAI,eAAe,OAAO;AAC1B,sBAAI,UAAU,KAAK,IAAI,GAAG,YAAY;AACtC,uCAAqB,qBAAsB,uBAAuB,UAAU,KAAK;AAAA,gBACrF;AACA,oBAAI,OAAO,WAAW,UAAU;AAC5B,sBAAI,UAAU,qBAAqB;AAEnC,sBAAI,gBAAgB,OAAO,UAAU,GAAG;AACxC,uCAAqB,UAAU;AAAA,gBACnC;AACA,uBAAO;AAAA,cACX;AAAA,YACJ;AACA,kBAAM,IAAI,MAAM,WAAW,2BAA2B;AAAA,UAC1D;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAuC,2BAAY;AACnD,mBAASC,uBAAsB,QAAQ;AACnC,iBAAK,UAAU,OAAO,UAAU,KAAK;AACrC,iBAAK,kBAAkB,OAAO;AAC9B,iBAAK,mBAAmB,OAAO;AAC/B,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,SAAS;AACd,iBAAK,OAAO,MAAM,uBAAuB,OAAO,KAAK,EAAE,OAAO,KAAK,SAAS,KAAK,SAAS,KAAK,kBAAkB,KAAK,eAAe;AAAA,UACzI;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAgC,2BAAY;AAC5C,mBAASC,gBAAe,QAAQ;AAC5B,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA+B,2BAAY;AAC3C,mBAASC,eAAc,QAAQ;AAC3B,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA+B,2BAAY;AAC3C,mBAASC,eAAc,QAAQ;AAC3B,iBAAK,SAAS,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,UAAU;AAC/E,iBAAK,OAAO;AACZ,iBAAK,OAAO,CAAC,IAAM,CAAI;AAEvB,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE,OAAO,UAAU,eAAe,KAAK,IAAI;AAAA,UAClG;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAqC,2BAAY;AACjD,mBAASC,qBAAoB,QAAQ;AACjC,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAMF,UAAI;AAAA;AAAA,QAAmC,2BAAY;AAC/C,mBAASC,mBAAkB,IAAI,IAAI;AAC/B,iBAAK,OAAO;AACZ,iBAAK,OAAO;AACZ,gBAAI,OAAO,MAAM;AACjB,iBAAK,MAAM;AAEX,gBAAI,OAAO,OAAO,aAAa;AAC3B,kBAAI,SAAS;AAAA,gBACT,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,gBAClF,CAAC,MAAM,MAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,cACtF;AACA,kBAAI,SAAS,GAAG;AAChB,kBAAIC,QAAO,MAAM;AACjB,kBAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,YAAY;AAC5B,uBAAO;AACX,kBAAI,SAAS,GAAG;AACZ,wBAAQ,GAAG,OAAO,SAAS,CAAC,GAAG;AAAA,kBAC3B,KAAK;AACD,2BAAO;AACP,oBAAAA,QAAO,GAAG,OAAO,CAAC,EAAE,YAAY;AAChC,oBAAAA,QAAOA,MAAK,OAAO,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC;AAC9C;AAAA,kBACJ,KAAK;AACD,2BAAO;AACP,oBAAAA,QAAO,GAAG,OAAO,CAAC,EAAE,YAAY;AAChC,oBAAAA,QAAOA,MAAK,OAAO,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC;AAC9C;AAAA,kBACJ,KAAK;AACD,2BAAO;AACP,oBAAAA,QAAO,GAAG,OAAO,CAAC,EAAE,YAAY;AAChC,oBAAAA,QAAOA,MAAK,OAAO,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC;AAC9C;AAAA,kBACJ,KAAK;AACD,2BAAO;AACP,oBAAAA,QAAO,GAAG,OAAO,CAAC,EAAE,YAAY;AAChC,oBAAAA,QAAOA,MAAK,OAAO,GAAG,UAAU,GAAG,SAAS,CAAC,CAAC;AAC9C;AAAA,gBACR;AAAA,cACJ;AACA,kBAAI,aAAa,OAAO,IAAI,EAAE,QAAQA,KAAI;AAC1C,mBAAK,eAAe,KAAK,IAAI,aAAa;AAAA,YAC9C;AAEA,iBAAK,OAAO,MAAM,uBAAuB,CAAI,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,CAAC,CAAI;AAAA;AAAA,cAC/F,MAAM,cAAc,IAAI,CAAC;AAAA;AAAA,cACzB,MAAM,cAAc,MAAM,CAAC;AAAA,YAAC;AAAA,UAChC;AACA,iBAAOD;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA4B,2BAAY;AACxC,mBAASE,YAAW,QAAQ;AACxB,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA6B,2BAAY;AACzC,mBAASC,aAAY,QAAQ;AACzB,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA6B,WAAY;AACzC,mBAASC,aAAY,QAAQ;AACzB,iBAAK,OAAO;AACZ,iBAAK,UAAU,OAAO,WAAW;AACjC,iBAAK,QAAQ,OAAO;AACpB,iBAAK,OAAO,OAAO,QAAQ;AAC3B,iBAAK,WAAW,OAAO,YAAY;AACnC,iBAAK,OAAO,OAAO,QAAQ;AAC3B,iBAAK,QAAQ;AACb,iBAAK,OAAO,OAAO;AACnB,iBAAK,SAAS;AAAA,UAClB;AAMA,UAAAA,aAAY,UAAU,YAAY,SAAU,OAAO,gBAAgB,SAAS;AACxE,gBAAI,YAAY,QAAQ;AAAE,wBAAU,CAAC;AAAA,YAAG;AACxC,iBAAK,OAAO,CAAC;AAEb,gBAAI,KAAK,MAAM;AACX,mBAAK,OAAO,MAAM,kBAAkB,KAAK,IAAI;AAE7C,kBAAI,MAAM,eAAe,GAAG;AACxB,qBAAK,QAAQ,KAAK;AAAA,cACtB;AAAA,YACJ,OACK;AACD,mBAAK,QAAQ,MAAM,gBAAgB,KAAK,IAAI;AAC5C,mBAAK,OAAO,MAAM,kBAAkB,MAAM,cAAc,KAAK,KAAK;AAAA,YACtE;AACA,iBAAK,+BAA+B,MAAM,kBAAkB,KAAK,QAAQ,cAAc;AACvF,iBAAK,OAAO,MAAM,uBAAuB,KAAK,4BAA4B,EACrE,OAAO,KAAK,SAAS,KAAK,UAAU,GAAG,MAAM,SAAS,KAAK,OAAO,QAAQ,OAAO,GAAG,MAAM,gBAAgB,KAAK,QAAQ,CAAC;AAC7H,mBAAO;AAAA,UACX;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA8B,WAAY;AAC1C,mBAASC,cAAa,QAAQ;AAC1B,iBAAK,OAAO;AACZ,iBAAK,UAAU,OAAO,WAAW;AACjC,iBAAK,QAAQ,OAAO;AACpB,iBAAK,WAAW,OAAO,YAAY;AACnC,iBAAK,OAAO,OAAO,QAAQ;AAC3B,iBAAK,OAAO,OAAO;AACnB,iBAAK,QAAQ,OAAO,SAAS,MAAM,gBAAgB,OAAO,QAAQ;AAClE,iBAAK,SAAS;AAAA,UAClB;AAMA,UAAAA,cAAa,UAAU,YAAY,SAAU,OAAO,gBAAgB,SAAS;AACzE,gBAAI,YAAY,QAAQ;AAAE,wBAAU,CAAC;AAAA,YAAG;AACxC,gBAAI,KAAK,SAAS,MAAM;AACpB,mBAAK,OAAO,MAAM,kBAAkB,KAAK,QAAQ,MAAM,WAAW;AAAA,YACtE;AACA,iBAAK,+BAA+B,MAAM,kBAAkB,KAAK,QAAQ,cAAc;AACvF,iBAAK,OAAO,MAAM,uBAAuB,KAAK,4BAA4B,EACrE,OAAO,KAAK,SAAS,KAAK,UAAU,GAAG,MAAM,SAAS,KAAK,OAAO,QAAQ,OAAO,GAAG,MAAM,gBAAgB,KAAK,QAAQ,CAAC;AAC7H,mBAAO;AAAA,UACX;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA2B,WAAY;AACvC,mBAASC,WAAU,QAAQ;AACvB,iBAAK,OAAO,CAAC;AACb,iBAAK,OAAO;AACZ,iBAAK,QAAQ,MAAM,QAAQ,OAAO,KAAK;AACvC,iBAAK,UAAU,OAAO,WAAW;AACjC,iBAAK,WAAW,OAAO,YAAY;AACnC,iBAAK,QAAQ,OAAO;AACpB,iBAAK,SAAS,OAAO,UAAU;AAC/B,iBAAK,aAAa,OAAO,cAAc;AACvC,iBAAK,OAAO,OAAO,aAAa,OAAO,QAAQ;AAC/C,iBAAK,WAAW,OAAO,YAAY;AACnC,iBAAK,OAAO,OAAO,QAAQ;AAC3B,iBAAK,eAAe,MAAM,gBAAgB,KAAK,QAAQ;AACvD,iBAAK,eAAe,MAAM,gBAAgB,KAAK,IAAI;AACnD,iBAAK,SAAS,CAAC;AAAA,UACnB;AAKA,UAAAA,WAAU,UAAU,YAAY,WAAY;AACxC,gBAAI,QAAQ;AAEZ,iBAAK,OAAO,CAAC;AAEb,gBAAI,KAAK,OAAO;AACZ,kBAAI,kBAAkB;AACtB,mBAAK,QAAQ,MAAM,QAAQ,KAAK,KAAK;AACrC,mBAAK,MAAM,QAAQ,WAAY;AAC3B,oBAAI,YAAY,IAAIA,WAAU,EAAE,OAAO,MAAM,OAAO,UAAU,MAAM,gBAAgB,CAAC;AACrF,sBAAM,OAAO,MAAM,KAAK,OAAO,UAAU,IAAI;AAAA,cACjD,CAAC;AAAA,YACL;AAKA,gBAAI,CAAC,KAAK,YAAY;AAElB,uBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAElC,qBAAK,MAAM,QAAQ,SAAU,GAAG,GAAG;AAC/B,sBAAI;AACJ,sBAAI,KAAK,GAAG;AACR,gCAAY,IAAI,YAAY;AAAA,sBACxB,SAAS,MAAM;AAAA,sBACf,MAAM,MAAM;AAAA,sBACZ,OAAO,MAAM,gBAAgB,MAAM,IAAI;AAAA,sBACvC,UAAU,MAAM;AAAA,sBAChB,OAAO;AAAA,sBACP,MAAM,MAAM;AAAA,oBAChB,CAAC;AAAA,kBACL,OACK;AAGD,gCAAY,IAAI,YAAY;AAAA,sBACxB,SAAS,MAAM;AAAA,sBACf,MAAM;AAAA,sBACN,OAAO;AAAA,sBACP,UAAU,MAAM;AAAA,sBAChB,OAAO;AAAA,sBACP,MAAM,MAAM;AAAA,oBAChB,CAAC;AAAA,kBACL;AACA,wBAAM,OAAO,KAAK,SAAS;AAAA,gBAC/B,CAAC;AAED,qBAAK,MAAM,QAAQ,SAAU,GAAG,GAAG;AAC/B,sBAAI;AACJ,sBAAI,KAAK,GAAG;AAER,iCAAa,IAAI,aAAa;AAAA,sBAC1B,SAAS,MAAM;AAAA,sBACf,UAAU,MAAM;AAAA,sBAChB,UAAU,MAAM;AAAA,sBAChB,OAAO;AAAA,sBACP,MAAM,MAAM,SAAS,OAAO,MAAM,gBAAgB,MAAM,QAAQ,IAAI,MAAM,OAAO;AAAA,oBACrF,CAAC;AAAA,kBACL,OACK;AAGD,iCAAa,IAAI,aAAa;AAAA,sBAC1B,SAAS,MAAM;AAAA,sBACf,UAAU;AAAA,sBACV,UAAU,MAAM;AAAA,sBAChB,OAAO;AAAA,sBACP,MAAM,MAAM,SAAS,OAAO,MAAM,gBAAgB,MAAM,QAAQ,IAAI,MAAM,OAAO;AAAA,oBACrF,CAAC;AAAA,kBACL;AACA,wBAAM,OAAO,KAAK,UAAU;AAAA,gBAChC,CAAC;AAAA,cACL;AAAA,YACJ,OACK;AAED,uBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,qBAAK,MAAM,QAAQ,SAAU,GAAG,GAAG;AAC/B,sBAAI,YAAY,IAAI,YAAY;AAAA,oBAC5B,SAAS,MAAM;AAAA,oBACf,MAAO,IAAI,IAAI,IAAI,MAAM;AAAA,oBACzB,OAAQ,IAAI,IAAI,IAAI,MAAM,gBAAgB,MAAM,IAAI;AAAA,oBACpD,UAAU,MAAM;AAAA,oBAChB,OAAO;AAAA,oBACP,MAAM,MAAM;AAAA,kBAChB,CAAC;AACD,sBAAI,aAAa,IAAI,aAAa;AAAA,oBAC9B,SAAS,MAAM;AAAA,oBACf,UAAU,MAAM;AAAA,oBAChB,UAAU,MAAM;AAAA,oBAChB,OAAO;AAAA,kBACX,CAAC;AACD,wBAAM,OAAO,KAAK,WAAW,UAAU;AAAA,gBAC3C,CAAC;AAAA,cACL;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAQF,UAAI;AAAA;AAAA,QAAgC,WAAY;AAC5C,mBAASC,gBAAe,QAAQ;AAC5B,iBAAK,UAAU,OAAO,WAAW;AACjC,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,SAAS;AACd,gBAAI,SAAS,KAAK,YAAY,OAAO,IAAI;AACzC,gBAAI,WAAW,SAAS;AACxB,gBAAI,WAAY,UAAU,IAAK;AAC/B,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE,OAAO,KAAK,SAAS,KAAK,SAAS,UAAU,QAAQ;AAAA,UAC9G;AACA,UAAAA,gBAAe,UAAU,cAAc,SAAU,SAAS;AACtD,gBAAI,WAAW,GAAG;AACd,qBAAO,KAAK,MAAM,SAAS,UAAU,KAAK,CAAC;AAAA,YAC/C;AACA,mBAAO,KAAK,MAAM,SAAS,UAAU,KAAK,CAAC;AAAA,UAC/C;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAoC,2BAAY;AAChD,mBAASC,oBAAmB,QAAQ;AAChC,iBAAK,UAAU,OAAO,WAAW;AACjC,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,aAAa,OAAO;AACzB,iBAAK,SAAS;AACd,iBAAK,OAAO;AAEZ,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE,OAAO,KAAK,SAAS,KAAK,SAAS,KAAK,UAAU;AAAA,UAC3G;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA4B,2BAAY;AACxC,mBAASC,YAAW,QAAQ;AACxB,iBAAK,MAAM,OAAO;AAClB,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,iBAAK,OAAO;AACZ,gBAAI,QAAQ,KAAK,MAAM,MAAW,KAAK,GAAG;AAE1C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,CAAC,CAAI;AAAA;AAAA,cACrG,MAAM,cAAc,OAAO,CAAC;AAAA,YAAC;AAAA,UACjC;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAA2B,2BAAY;AACvC,mBAASC,WAAU,QAAQ;AACvB,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,OAAO,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC/I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAMF,UAAI;AAAA;AAAA,QAAoC,2BAAY;AAChD,mBAASC,oBAAmB,WAAW,aAAa,mBAAmB,mBAAmB;AACtF,iBAAK,OAAO;AACZ,iBAAK,OAAO;AAEZ,iBAAK,OAAO,MAAM,uBAAuB,CAAI,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,CAAC,CAAI;AAAA;AAAA,cAC/F,MAAM,cAAc,WAAW,CAAC;AAAA;AAAA,cAChC,MAAM,cAAc,KAAK,KAAK,WAAW,GAAG,CAAC;AAAA;AAAA,cAC7C,MAAM,cAAc,qBAAqB,IAAI,CAAC;AAAA;AAAA,cAC9C,MAAM,cAAc,qBAAqB,GAAG,CAAC;AAAA,YAAC;AAAA,UAClD;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAgC,2BAAY;AAC5C,mBAASC,gBAAe,QAAQ;AAC5B,iBAAK,QAAQ,OAAO,SAAS;AAC7B,iBAAK,OAAO;AACZ,iBAAK,OAAO,OAAO;AACnB,iBAAK,OAAO;AACZ,gBAAI,YAAY,MAAM,cAAc,KAAK,IAAI;AAE7C,iBAAK,OAAO,MAAM,uBAAuB,KAAK,KAAK,EAAE;AAAA,cAAO,UAAU;AAAA,cAAe,KAAK;AAAA,cAAM,MAAM,uBAAuB,UAAU,MAAM;AAAA;AAAA,cAC7I;AAAA,YAAS;AAAA,UACb;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAuB,WAAY;AACnC,mBAASC,SAAQ;AACb,iBAAK,OAAO,UAAU;AACtB,iBAAK,OAAO,CAAC;AACb,iBAAK,OAAO,CAAC;AACb,iBAAK,SAAS,CAAC;AACf,iBAAK,qBAAqB,CAAC;AAG3B,iBAAK,cAAc;AAAA,UACvB;AAWA,UAAAA,OAAM,UAAU,WAAW,SAAU,QAAQ,aAAa;AACtD,gBAAI,QAAQ;AACZ,kBAAM,QAAQ,MAAM,EAAE,QAAQ,SAAU,OAAO,GAAG;AAC9C,kBAAI,iBAAiB,WAAW;AAE5B,oBAAI,OAAO,gBAAgB,YAAY;AACnC,sBAAI,aAAa,YAAY,GAAG,KAAK;AACrC,sBAAI,OAAO,eAAe,UAAU;AAChC,2BAAO,OAAO,OAAO,UAAU;AAAA,kBACnC;AAAA,gBACJ;AAEA,oBAAI,MAAM,SAAS,MAAM;AACrB,wBAAM,mBAAmB,KAAK,KAAK;AAAA,gBACvC,OACK;AAED,wBAAM,UAAU,EAAE,OAAO,QAAQ,SAAU,GAAG;AAAE,2BAAO,MAAM,OAAO,KAAK,CAAC;AAAA,kBAAG,CAAC;AAAA,gBAClF;AAAA,cACJ,OACK;AACD,sBAAM,OAAO,KAAK,KAAK;AAAA,cAC3B;AAAA,YACJ,CAAC;AACD,mBAAO;AAAA,UACX;AAMA,UAAAA,OAAM,UAAU,YAAY,SAAU,SAAS;AAC3C,gBAAI,QAAQ;AACZ,gBAAI,YAAY,QAAQ;AAAE,wBAAU,CAAC;AAAA,YAAG;AAExC,iBAAK,OAAO,CAAC;AACb,iBAAK,OAAO,CAAC;AACb,iBAAK,cAAc;AACnB,gBAAI,gBAAgB;AACpB,iBAAK,OAAO,QAAQ,SAAU,OAAO;AAEjC,kBAAI,iBAAiB,eAAe,iBAAiB,cAAc;AAC/D,oBAAI,QAAQ,MAAM,UAAU,OAAO,eAAe,OAAO;AACzD,gCAAgB,MAAM,iBAAiB,MAAM,gCAAgC,CAAC;AAC9E,sBAAM,OAAO,MAAM,KAAK,OAAO,MAAM,IAAI;AACzC,sBAAM,cAAc,MAAM,kBAAkB,MAAM,IAAI;AAAA,cAC1D,WACS,iBAAiB,YAAY;AAClC,sBAAM,cAAc,MAAM,kBAAkB,MAAM,IAAI;AACtD,sBAAM,OAAO,MAAM,KAAK,OAAO,MAAM,IAAI;AAAA,cAC7C,OACK;AACD,sBAAM,OAAO,MAAM,KAAK,OAAO,MAAM,IAAI;AAAA,cAC7C;AAAA,YACJ,CAAC;AACD,iBAAK,wBAAwB;AAE7B,gBAAI,CAAC,KAAK,OAAO,UAAU,EAAE,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,aAAa,gBAAgB;AACxF,mBAAK,OAAO,KAAK,KAAK,OAAQ,IAAI,gBAAe,IAAI;AAAA,YACzD;AACA,iBAAK,OAAO,MAAM,cAAc,KAAK,KAAK,QAAQ,CAAC;AACnD,mBAAO;AAAA,UACX;AACA,UAAAA,OAAM,UAAU,0BAA0B,WAAY;AAClD,gBAAI,QAAQ;AACZ,gBAAI,CAAC,KAAK,mBAAmB;AACzB;AAEJ,iBAAK,mBAAmB,KAAK,SAAU,GAAG,GAAG;AAAE,qBAAO,EAAE,OAAO,EAAE;AAAA,YAAM,CAAC;AAIxE,iBAAK,mBAAmB,QAAQ,SAAU,WAAW;AAIjD,wBAAU,UAAU,EAAE,OAAO,QAAQ,SAAU,GAAG;AAAE,uBAAO,EAAE,UAAU,KAAK;AAAA,cAAG,CAAC;AAEhF,wBAAU,OAAO,QAAQ,SAAU,OAAO;AAAE,uBAAO,MAAM,iBAAiB,KAAK;AAAA,cAAG,CAAC;AAAA,YACvF,CAAC;AAED,iBAAK,qBAAqB,CAAC;AAC3B,iBAAK,UAAU;AAAA,UACnB;AAMA,UAAAA,OAAM,UAAU,aAAa,SAAU,OAAO;AAC1C,gBAAI,QAAQ;AAEZ,iBAAK,UAAU;AAEf,kBAAM,UAAU,EAAE,OAAO,QAAQ,SAAU,OAAO;AAAE,qBAAO,MAAM,iBAAiB,KAAK;AAAA,YAAG,CAAC;AAC3F,mBAAO;AAAA,UACX;AAMA,UAAAA,OAAM,UAAU,mBAAmB,SAAU,OAAO;AAEhD,gBAAI,CAAC,KAAK,OAAO,QAAQ;AACrB,mBAAK,SAAS,KAAK;AACnB;AAAA,YACJ;AAEA,gBAAI;AACJ,qBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,kBAAI,KAAK,OAAO,CAAC,EAAE,OAAO,MAAM;AAC5B;AACJ,+BAAiB;AAAA,YACrB;AACA,gBAAI,oBAAoB,iBAAiB;AAEzC,kBAAM,QAAQ,MAAM,OAAO,KAAK,OAAO,cAAc,EAAE;AAEvD,iBAAK,OAAO,OAAO,mBAAmB,GAAG,KAAK;AAE9C,qBAAS,IAAI,oBAAoB,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAG7D,mBAAK,OAAO,CAAC,EAAE,QAAQ,KAAK,OAAO,CAAC,EAAE,OAAO,KAAK,OAAO,IAAI,CAAC,EAAE;AAAA,YACpE;AAAA,UACJ;AAMA,UAAAA,OAAM,UAAU,qBAAqB,SAAU,WAAW;AACtD,gBAAI,QAAQ;AACZ,iBAAK,OAAO,QAAQ,SAAU,OAAO,OAAO;AACxC,kBAAI,MAAM,SAAS,WAAW;AAC1B,sBAAM,OAAO,OAAO,OAAO,CAAC;AAAA,cAChC;AAAA,YACJ,CAAC;AACD,mBAAO;AAAA,UACX;AAOA,UAAAA,OAAM,UAAU,WAAW,SAAU,KAAK,MAAM;AAC5C,gBAAI,SAAS,QAAQ;AAAE,qBAAO;AAAA,YAAG;AACjC,mBAAO,KAAK,SAAS,IAAI,WAAW,EAAE,KAAU,KAAW,CAAC,CAAC;AAAA,UACjE;AASA,UAAAA,OAAM,UAAU,mBAAmB,SAAU,WAAW,aAAa,mBAAmB,mBAAmB;AACvG,mBAAO,KAAK,SAAS,IAAI,mBAAmB,WAAW,aAAa,mBAAmB,iBAAiB,CAAC;AAAA,UAC7G;AAOA,UAAAA,OAAM,UAAU,kBAAkB,SAAU,IAAI,IAAI;AAChD,mBAAO,KAAK,SAAS,IAAI,kBAAkB,IAAI,EAAE,CAAC;AAAA,UACtD;AAMA,UAAAA,OAAM,UAAU,UAAU,SAAU,MAAM;AACtC,mBAAO,KAAK,SAAS,IAAI,UAAU,EAAE,KAAW,CAAC,CAAC;AAAA,UACtD;AAMA,UAAAA,OAAM,UAAU,eAAe,SAAU,MAAM;AAC3C,mBAAO,KAAK,SAAS,IAAI,eAAe,EAAE,KAAW,CAAC,CAAC;AAAA,UAC3D;AAMA,UAAAA,OAAM,UAAU,eAAe,SAAU,MAAM;AAC3C,mBAAO,KAAK,SAAS,IAAI,eAAe,EAAE,KAAW,CAAC,CAAC;AAAA,UAC3D;AAMA,UAAAA,OAAM,UAAU,oBAAoB,SAAU,MAAM;AAChD,mBAAO,KAAK,SAAS,IAAI,oBAAoB,EAAE,KAAW,CAAC,CAAC;AAAA,UAChE;AAMA,UAAAA,OAAM,UAAU,YAAY,SAAU,MAAM;AACxC,mBAAO,KAAK,SAAS,IAAI,YAAY,EAAE,KAAW,CAAC,CAAC;AAAA,UACxD;AAMA,UAAAA,OAAM,UAAU,cAAc,SAAU,MAAM;AAC1C,mBAAO,KAAK,SAAS,IAAI,cAAc,EAAE,KAAW,CAAC,CAAC;AAAA,UAC1D;AAMA,UAAAA,OAAM,UAAU,WAAW,SAAU,MAAM;AACvC,mBAAO,KAAK,SAAS,IAAI,WAAW,EAAE,KAAW,CAAC,CAAC;AAAA,UACvD;AAKA,UAAAA,OAAM,UAAU,aAAa,WAAY;AACrC,gBAAI,QAAQ,IAAI,YAAY,EAAE,MAAM,CAAC,GAAM,KAAM,KAAM,CAAI,EAAE,CAAC;AAC9D,mBAAO,KAAK,SAAS,KAAK;AAAA,UAC9B;AAMA,UAAAA,OAAM,UAAU,eAAe,SAAU,MAAM;AAC3C,mBAAO,KAAK,SAAS,IAAI,eAAe,EAAE,KAAW,CAAC,CAAC;AAAA,UAC3D;AASA,UAAAA,OAAM,UAAU,mBAAmB,SAAU,QAAQ,OAAO,SAAS,OAAO;AACxE,mBAAO,KAAK,SAAS,IAAI,sBAAsB,EAAE,kBAAkB,QAAQ,iBAAiB,OAAO,SAAkB,MAAa,CAAC,CAAC;AAAA,UACxI;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAEF,UAAI;AAAA;AAAA,QAAyB,WAAY;AACrC,mBAASC,WAAU;AAAA,UACnB;AAKA,UAAAA,SAAQ,UAAU,iBAAiB,SAAU,OAAO,SAAS;AACzD,gBAAI,QAAQ;AACZ,gBAAI,YAAY,QAAQ;AAAE,wBAAU,EAAE,wBAAwB,MAAM;AAAA,YAAG;AACvE,gBAAI,QAAQ,IAAI;AAChB,gBAAI,OAAO,CAAC;AACZ,kBAAM,UAAU,QAAQ,SAAU,UAAU;AACxC,kBAAI,SAAS,aAAa,KAAK;AAC3B,sBAAM,SAAS,IAAI,UAAU;AAAA,kBACzB,OAAO,SAAS,KAAK,IAAI,SAAU,OAAO,OAAO;AAAE,2BAAO,MAAM,aAAa,OAAO,OAAO,UAAU,QAAQ,sBAAsB;AAAA,kBAAG,CAAC;AAAA,kBACvI,UAAU,MAAM,gBAAgB,QAAQ;AAAA,kBACxC;AAAA,gBACJ,CAAC,CAAC;AAEF,uBAAO,CAAC;AAAA,cACZ,WACS,SAAS,aAAa,KAAK;AAGhC,qBAAK,KAAK,MAAM,gBAAgB,QAAQ,CAAC;AAAA,cAC7C;AAAA,YACJ,CAAC;AAGD,gBAAI,KAAK,SAAS,GAAG;AACjB,oBAAM,SAAS,IAAI,UAAU,EAAE,OAAO,QAAQ,UAAU,KAAK,MAAY,UAAU,IAAI,CAAC,CAAC;AAAA,YAC7F;AACA,mBAAO;AAAA,UACX;AAQA,UAAAA,SAAQ,UAAU,eAAe,SAAU,OAAO,OAAOb,OAAM,wBAAwB;AACnF,gBAAI;AACJ,gBAAI,2BAA2B,QAAQ;AAAE,uCAAyB;AAAA,YAAO;AAEzE,gBAAI,aAAa,MAAM,MAAM,GAAG;AAGhC,gBAAI,cAAc,WAAW,CAAC,EAAE,UAAU,CAAC,EAAE,QAAQ,KAAK,EAAE;AAC5D,gBAAI,wBAAwB;AACxB,eAAC,KAAKA,MAAK,eAAe,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,SAAU,YAAY;AAC/F,oBAAI,WAAW,UAAU,OAAO;AAC5B,sBAAI,WAAW,SAAS,KAAK;AACzB,kCAAc;AAAA,kBAClB,OACK;AACD,mCAAe,WAAW;AAAA,kBAC9B;AAAA,gBACJ;AAAA,cACJ,CAAC;AAAA,YACL;AACA,mBAAO,WAAW,CAAC,EAAE,CAAC,IAAI,cAAc,WAAW,CAAC;AAAA,UACxD;AAKA,UAAAa,SAAQ,UAAU,kBAAkB,SAAUb,OAAM;AAChD,mBAAO,IAAI,OAAOA,MAAK,IAAI,IAAI,KAAK,oBAAoBA,MAAK,QAAQ,KAAKA,MAAK,SAAS,MAAMA,MAAK,OAAO,YAAY;AAAA,UAC1H;AAMA,UAAAa,SAAQ,UAAU,sBAAsB,SAAU,UAAU;AACxD,oBAAQ,UAAU;AAAA,cACd,KAAK;AACD,uBAAO;AAAA,cACX,KAAK;AACD,uBAAO;AAAA,cACX,KAAK;AACD,uBAAO;AAAA,cACX;AACI,uBAAO;AAAA,YACf;AAAA,UACJ;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAOF,UAAI;AAAA;AAAA,QAAwB,2BAAY;AACpC,mBAASC,QAAO,gBAAgB;AAC5B,iBAAK,OAAO,UAAU;AACtB,gBAAI,YAAY,iBAAiB,IAAI,UAAU,uBAAuB,UAAU;AAChF,iBAAK,OAAO,UAAU;AAAA,cAAO,MAAM,cAAc,gBAAgB,CAAC;AAAA;AAAA,cAClE,UAAU;AAAA,YAAqB;AAC/B,iBAAK,OAAO,CAAC,GAAG,GAAG,GAAG,KAAK,KAAK,MAAM;AAAA,UAC1C;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAQF,UAAI;AAAA;AAAA,QAAwB,WAAY;AACpC,mBAASC,QAAO,QAAQ,SAAS;AAC7B,gBAAI,YAAY,QAAQ;AAAE,wBAAU,CAAC;AAAA,YAAG;AAExC,iBAAK,SAAS,MAAM,QAAQ,MAAM;AAClC,iBAAK,UAAU;AAAA,UACnB;AAKA,UAAAA,QAAO,UAAU,YAAY,WAAY;AACrC,gBAAI,QAAQ;AACZ,gBAAI,OAAO,CAAC;AACZ,iBAAK,KAAK,IAAI,OAAO,KAAK,OAAO,MAAM,CAAC;AAExC,iBAAK,OAAO,QAAQ,SAAU,OAAO;AACjC,mBAAK,KAAK,MAAM,UAAU,MAAM,OAAO,CAAC;AAAA,YAC5C,CAAC;AACD,mBAAO;AAAA,UACX;AAKA,UAAAA,QAAO,UAAU,YAAY,WAAY;AACrC,gBAAI,QAAQ,CAAC;AAEb,iBAAK,UAAU,EAAE,QAAQ,SAAU,GAAG;AAAE,qBAAO,QAAQ,MAAM,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI;AAAA,YAAG,CAAC;AAC9F,mBAAO,IAAI,WAAW,KAAK;AAAA,UAC/B;AAKA,UAAAA,QAAO,UAAU,SAAS,WAAY;AAClC,gBAAI,OAAO,SAAS,YAAY;AAC5B,kBAAI,SAAS;AACb,kBAAI,QAAQ,KAAK,UAAU;AAC3B,kBAAI,MAAM,MAAM;AAChB,uBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,0BAAU,OAAO,aAAa,MAAM,CAAC,CAAC;AAAA,cAC1C;AACA,qBAAO,KAAK,MAAM;AAAA,YACtB;AACA,mBAAO,OAAO,KAAK,KAAK,UAAU,CAAC,EAAE,SAAS,QAAQ;AAAA,UAC1D;AAKA,UAAAA,QAAO,UAAU,UAAU,WAAY;AACnC,mBAAO,4BAA4B,KAAK,OAAO;AAAA,UACnD;AAOA,UAAAA,QAAO,UAAU,YAAY,SAAU,KAAK,OAAO;AAC/C,iBAAK,QAAQ,GAAG,IAAI;AACpB,mBAAO;AAAA,UACX;AAKA,UAAAA,QAAO,UAAU,SAAS,WAAY;AAClC,mBAAO,QAAQ,OAAO,MAAM,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC;AAAA,UAC7D;AACA,iBAAOA;AAAA,QACX,EAAE;AAAA;AAEF,UAAI,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAEA,aAAO,UAAU;AAAA;AAAA;;;ACn1CjB;AAAA;AACA,kCAAyB;AAGzB,UAAM,QAAQ,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG;AAC9E,UAAM,YAAY,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAAK,GAAG;AACxK,UAAM,iBAA2C;AAAA,QAC7C,IAAI,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,MAAM,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,WAAW,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,KAAK,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,QAAQ,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,MAAM,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;AAAA,QAAG,MAAM,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;AAAA,QAAG,MAAM,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;AAAA,QAAG,SAAS,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;AAAA,QAAG,OAAO,CAAC,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG;AAAA,MACj+C;AAEA,eAAS,kBAAkB,MAAsB;AAC7C,cAAM,OAAO,KAAK,YAAY;AAC9B,gBAAQ,MAAM;AAAA,UACV,KAAK;AAAM,mBAAO;AAAA,UAAM,KAAK;AAAM,mBAAO;AAAA,UAAM,KAAK;AAAM,mBAAO;AAAA,UAAK,KAAK;AAAM,mBAAO;AAAA,UAAM,KAAK;AAAM,mBAAO;AAAA,UAAM,KAAK;AAAM,mBAAO;AAAA,UAAM,KAAK;AAAM,mBAAO;AAAA,UAAK,KAAK;AAAM,mBAAO;AAAA,UAAK;AAAS,mBAAO;AAAA,QACjN;AAAA,MACJ;AAEA,eAAS,aAAa,MAAsB;AACxC,cAAM,iBAAiB,kBAAkB,IAAI;AAC7C,cAAM,QAAQ,MAAM,QAAQ,cAAc;AAC1C,YAAI,UAAU,GAAI,OAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AAC9D,eAAO;AAAA,MACX;AAEA,eAAS,YAAY,UAAkB,QAAwB;AAC3D,cAAM,YAAY,aAAa,QAAQ;AACvC,cAAM,UAAU,MAAM,SAAS,KAAK;AACnC,YAAI,UAAU,KAAK,UAAU,KAAK;AAC9B,kBAAQ,KAAK,wBAAwB,OAAO,QAAQ,QAAQ,GAAG,MAAM,2BAA2B;AAAA,QACpG;AACD,eAAO;AAAA,MACX;AAIA,eAAS,gBAAgB;AACrB,cAAM,OAAO,SAAS,eAAe,UAAU;AAC/C,cAAM,YAAY,SAAS,eAAe,QAAQ;AAClD,cAAM,iBAAiB,SAAS,eAAe,UAAU;AACzD,cAAM,oBAAoB,SAAS,eAAe,eAAe;AAEjE,YAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,mBAAmB;AAC9D,kBAAQ,MAAM,0BAA0B;AACxC,cAAI,UAAW,WAAU,cAAc;AACvC;AAAA,QACJ;AAGA,uBAAe,iBAAiB,SAAS,CAAC,UAAU;AAChD,4BAAkB,cAAe,MAAM,OAA4B;AAAA,QACvE,CAAC;AAED,aAAK,iBAAiB,UAAU,CAAC,UAAU;AACvC,gBAAM,eAAe;AACrB,oBAAU,cAAc;AACxB,oBAAU,UAAU,OAAO,gBAAgB,gBAAgB;AAC3D,oBAAU,UAAU,IAAI,eAAe;AAEvC,cAAI;AAEA,kBAAM,WAAW,IAAI,SAAS,IAAI;AAClC,kBAAM,oBAAoB,SAAS,IAAI,aAAa;AACpD,kBAAM,iBAAiB,SAAS,IAAI,gBAAgB,KAAe;AACnE,kBAAM,cAAc,SAAS,IAAI,aAAa;AAC9C,kBAAM,cAAc,SAAS,IAAI,aAAa;AAC9C,kBAAM,aAAa,SAAS,SAAS,IAAI,YAAY,GAAa,EAAE;AACpE,kBAAM,gBAAgB,SAAS,IAAI,eAAe;AAClD,kBAAM,QAAQ,SAAS,SAAS,IAAI,OAAO,GAAa,EAAE;AAC1D,kBAAM,WAAW,SAAS,SAAS,IAAI,UAAU,GAAa,EAAE;AAEhE,gBAAI,CAAC,qBAAqB,kBAAkB,KAAK,MAAM,IAAI;AACtD,oBAAM,IAAI,MAAM,oCAAoC;AAAA,YACzD;AAGA,kBAAM,gBAAgB,eAAe,SAAS,MAAM,IAAI,iBAAiB,GAAG,cAAc;AAG1F,kBAAM,QAAQ,IAAI,sBAAAC,QAAa,MAAM;AACrC,kBAAM,SAAS,KAAK;AACpB,kBAAM,iBAAiB,GAAG,GAAG,IAAI,CAAC;AAElC,kBAAM,eAAe,kBAAkB,KAAK,EAAE,MAAM,KAAK;AACzD,kBAAM,aAAa;AAEnB,uBAAW,UAAU,cAAc;AAC/B,kBAAI,CAAC,OAAQ;AACb,oBAAM,QAAQ,OAAO,MAAM,UAAU;AAErC,kBAAI,CAAC,OAAO;AACR,wBAAQ,KAAK,kCAAkC,MAAM,cAAc;AACnE,sBAAM,SAAS,IAAI,sBAAAA,QAAa,UAAU,EAAE,OAAO,CAAC,GAAG,MAAM,eAAe,UAAU,eAAe,UAAU,EAAE,CAAC,CAAC;AACnH;AAAA,cACJ;AAEA,oBAAM,eAAe,MAAM,CAAC;AAC5B,oBAAM,uBAAuB,MAAM,CAAC;AAEpC,kBAAI;AACA,sBAAM,WAAW,YAAY,cAAc,UAAU;AACrD,oBAAI,mBAAmB,eAAe,oBAAoB;AAC1D,oBAAI,qBAAqB,QAAW;AAC/B,sBAAI,yBAAyB,IAAI;AAAE,uCAAmB,eAAe,EAAE;AAAA,kBAAG,OACrE;AAAE,4BAAQ,KAAK,kBAAkB,oBAAoB,oBAAoB,MAAM,+BAA+B;AAAG,uCAAmB,eAAe,EAAE;AAAA,kBAAG;AAAA,gBAClK;AAEA,oBAAI,iBAAiB,iBAAiB,IAAI,uBAAqB,WAAW,iBAAiB;AAE3F,oBAAI,eAAe,eAAe,SAAS,GAAG;AAC1C,iCAAe,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACnC,wBAAM,aAAa,eAAe,MAAM;AACxC,sBAAI,eAAe,QAAW;AAAE,mCAAe,KAAK,aAAa,EAAE;AAAA,kBAAG;AACrE,iCAAe,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAAA,gBACxC;AAEA,oBAAI,aAAa,CAAC,GAAG,cAAc;AAEnC,oBAAI,aAAa;AACb,wBAAM,eAAe,WAAW;AAChC,sBAAI,CAAC,WAAW,UAAU,eAAe,KAAK,IAAI,GAAG,UAAU,GAAG;AAC7D,wBAAG,gBAAgB,GAAG;AAAE,iCAAW,QAAQ,YAAY;AAAA,oBAAG,OACrD;AAAE,8BAAQ,KAAK,wBAAwB,YAAY,QAAQ,MAAM,6CAA6C;AAAA,oBAAG;AAAA,kBAC3H;AAAA,gBACJ;AAEA,6BAAa,WAAW,OAAO,UAAQ,QAAQ,KAAK,QAAQ,GAAG;AAC/D,6BAAa,CAAC,GAAG,IAAI,IAAI,UAAU,CAAC;AAEpC,oBAAI,WAAW,SAAS,GAAG;AACvB,wBAAM,SAAS,IAAI,sBAAAA,QAAa,UAAU;AAAA,oBACtC,OAAO;AAAA,oBACP,UAAU;AAAA,oBACV;AAAA,kBACJ,CAAC,CAAC;AAAA,gBACN,OAAO;AACH,0BAAQ,KAAK,4CAA4C,MAAM,iBAAiB;AAChF,wBAAM,SAAS,IAAI,sBAAAA,QAAa,UAAU,EAAE,OAAO,CAAC,GAAG,MAAM,eAAe,UAAU,eAAe,UAAU,EAAE,CAAC,CAAC;AAAA,gBACvH;AAAA,cAEJ,SAAS,OAAY;AAChB,wBAAQ,MAAM,2BAA2B,MAAM,eAAe,MAAM,OAAO,gBAAgB;AAC3F,0BAAU,cAAc,2BAA2B,MAAM,MAAM,MAAM,OAAO;AAC5E,0BAAU,UAAU,QAAQ,iBAAgB,cAAc;AAC1D,sBAAM,SAAS,IAAI,sBAAAA,QAAa,UAAU,EAAE,OAAO,CAAC,GAAG,MAAM,eAAe,UAAU,eAAe,UAAU,EAAE,CAAC,CAAC;AAAA,cACxH;AAAA,YACJ;AAIA,kBAAM,SAAS,IAAI,sBAAAA,QAAa,OAAO,CAAC,KAAK,CAAC;AAC9C,kBAAM,WAAW,OAAO,UAAU;AAElC,kBAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG,EAAE,MAAM,aAAa,CAAC;AACxD,kBAAM,MAAM,IAAI,gBAAgB,IAAI;AAEpC,kBAAM,OAAO,SAAS,cAAc,GAAG;AACvC,iBAAK,OAAO;AACZ,iBAAK,WAAW;AAEhB,qBAAS,KAAK,YAAY,IAAI;AAC9B,iBAAK,MAAM;AACX,qBAAS,KAAK,YAAY,IAAI;AAC9B,gBAAI,gBAAgB,GAAG;AAEvB,sBAAU,cAAc,cAAc,aAAa;AACnD,sBAAU,UAAU,QAAQ,iBAAgB,gBAAgB;AAAA,UAEhE,SAAS,OAAY;AAChB,oBAAQ,MAAM,0BAA0B,KAAK;AAC7C,sBAAU,cAAc,UAAU,MAAM,OAAO;AAC/C,sBAAU,UAAU,QAAQ,iBAAgB,cAAc;AAAA,UAC/D;AAAA,QACJ,CAAC;AAAA,MACL;AAGA,UAAI,SAAS,eAAe,WAAW;AACnC,iBAAS,iBAAiB,oBAAoB,aAAa;AAAA,MAC/D,OAAO;AACH,sBAAc;AAAA,MAClB;AAAA;AAAA;",
  "names": ["Utils", "ControllerChangeEvent", "CopyrightEvent", "CuePointEvent", "EndTrackEvent", "InstrumentNameEvent", "KeySignatureEvent", "note", "LyricEvent", "MarkerEvent", "NoteOnEvent", "NoteOffEvent", "NoteEvent", "PitchBendEvent", "ProgramChangeEvent", "TempoEvent", "TextEvent", "TimeSignatureEvent", "TrackNameEvent", "Track", "VexFlow", "Header", "Writer", "midiWriterJs"]
}
