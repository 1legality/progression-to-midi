{
  "version": 3,
  "sources": ["../node_modules/midi-writer-js/build/index.js", "../MidiGenerator.ts", "../SynthChordPlayer.ts", "../PianoRollDrawer.ts", "../ChordInfoModal.ts", "../ValidationUtils.ts", "../ChordProgressionSequencer.ts", "../Utils.ts", "../StepSequencer.ts", "../Main.ts"],
  "sourcesContent": ["'use strict';\n\n/**\n * MIDI file format constants.\n * @return {Constants}\n */\nvar Constants = {\n    VERSION: '3.1.1',\n    HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],\n    HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],\n    HEADER_CHUNK_FORMAT0: [0x00, 0x00],\n    HEADER_CHUNK_FORMAT1: [0x00, 0x01],\n    HEADER_CHUNK_DIVISION: [0x00, 0x80],\n    TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],\n    META_EVENT_ID: 0xFF,\n    META_SMTPE_OFFSET: 0x54\n};\n\n// src/utils.ts\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\n\n// src/named.ts\nfunction isNamed(src) {\n  return src !== null && typeof src === \"object\" && typeof src.name === \"string\" ? true : false;\n}\n\n// src/pitch.ts\nfunction isPitch(pitch) {\n  return pitch !== null && typeof pitch === \"object\" && typeof pitch.step === \"number\" && typeof pitch.alt === \"number\" ? true : false;\n}\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\nvar STEPS_TO_OCTS = FIFTHS.map(\n  (fifths) => Math.floor(fifths * 7 / 12)\n);\nfunction encode(pitch) {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === void 0) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// src/note.ts\nvar NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\nvar cache = /* @__PURE__ */ new Map();\nvar stepToLetter = (step) => \"CDEFGAB\".charAt(step);\nvar altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nvar accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\nfunction note(src) {\n  const stringSrc = JSON.stringify(src);\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n  const value = typeof src === \"string\" ? parse(src) : isPitch(src) ? note(pitchName(src)) : isNamed(src) ? note(src.name) : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\nfunction tokenizeNote(str) {\n  const m = REGEX.exec(str);\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\nvar mod = (n, m) => (n % m + m) % m;\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName) {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : void 0;\n  const coord = encode({ step, alt, oct });\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height = oct === void 0 ? mod(SEMI[step] + alt, 12) - 12 * 99 : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === void 0 ? null : Math.pow(2, (height - 69) / 12) * 440;\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step\n  };\n}\nfunction pitchName(props) {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n\n// index.ts\nfunction isMidi(arg) {\n  return +arg >= 0 && +arg <= 127;\n}\nfunction toMidi(note$1) {\n  if (isMidi(note$1)) {\n    return +note$1;\n  }\n  const n = note(note$1);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Static utility functions used throughout the library.\n */\nvar Utils = /** @class */ (function () {\n    function Utils() {\n    }\n    /**\n     * Gets MidiWriterJS version number.\n     * @return {string}\n     */\n    Utils.version = function () {\n        return Constants.VERSION;\n    };\n    /**\n     * Convert a string to an array of bytes\n     * @param {string} string\n     * @return {array}\n     */\n    Utils.stringToBytes = function (string) {\n        return string.split('').map(function (char) { return char.charCodeAt(0); });\n    };\n    /**\n     * Checks if argument is a valid number.\n     * @param {*} n - Value to check\n     * @return {boolean}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.isNumeric = function (n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n    /**\n     * Returns the correct MIDI number for the specified pitch.\n     * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi\n     * @param {(string|number)} pitch - 'C#4' or midi note code\n     * @param {string} middleC\n     * @return {number}\n     */\n    Utils.getPitch = function (pitch, middleC) {\n        if (middleC === void 0) { middleC = 'C4'; }\n        return 60 - toMidi(middleC) + toMidi(pitch);\n    };\n    /**\n     * Translates number of ticks to MIDI timestamp format, returning an array of\n     * hex strings with the time values. Midi has a very particular time to express time,\n     * take a good look at the spec before ever touching this function.\n     * Thanks to https://github.com/sergi/jsmidi\n     *\n     * @param {number} ticks - Number of ticks to be translated\n     * @return {array} - Bytes that form the MIDI time value\n     */\n    Utils.numberToVariableLength = function (ticks) {\n        ticks = Math.round(ticks);\n        var buffer = ticks & 0x7F;\n        // eslint-disable-next-line no-cond-assign\n        while (ticks = ticks >> 7) {\n            buffer <<= 8;\n            buffer |= ((ticks & 0x7F) | 0x80);\n        }\n        var bList = [];\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            bList.push(buffer & 0xff);\n            if (buffer & 0x80)\n                buffer >>= 8;\n            else {\n                break;\n            }\n        }\n        return bList;\n    };\n    /**\n     * Counts number of bytes in string\n     * @param {string} s\n     * @return {number}\n     */\n    Utils.stringByteCount = function (s) {\n        return encodeURI(s).split(/%..|./).length - 1;\n    };\n    /**\n     * Get an int from an array of bytes.\n     * @param {array} bytes\n     * @return {number}\n     */\n    Utils.numberFromBytes = function (bytes) {\n        var hex = '';\n        var stringResult;\n        bytes.forEach(function (byte) {\n            stringResult = byte.toString(16);\n            // ensure string is 2 chars\n            if (stringResult.length == 1)\n                stringResult = \"0\" + stringResult;\n            hex += stringResult;\n        });\n        return parseInt(hex, 16);\n    };\n    /**\n     * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded\n     * @param {number} number\n     * @param {number} bytesNeeded\n     * @return {array} - Array of bytes\n     */\n    Utils.numberToBytes = function (number, bytesNeeded) {\n        bytesNeeded = bytesNeeded || 1;\n        var hexString = number.toString(16);\n        if (hexString.length & 1) { // Make sure hex string is even number of chars\n            hexString = '0' + hexString;\n        }\n        // Split hex string into an array of two char elements\n        var hexArray = hexString.match(/.{2}/g);\n        // Now parse them out as integers\n        var intArray = hexArray.map(function (item) { return parseInt(item, 16); });\n        // Prepend empty bytes if we don't have enough\n        if (intArray.length < bytesNeeded) {\n            while (bytesNeeded - intArray.length > 0) {\n                intArray.unshift(0);\n            }\n        }\n        return intArray;\n    };\n    /**\n     * Converts value to array if needed.\n     * @param {any} value\n     * @return {array}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.toArray = function (value) {\n        if (Array.isArray(value))\n            return value;\n        return [value];\n    };\n    /**\n     * Converts velocity to value 0-127\n     * @param {number} velocity - Velocity value 1-100\n     * @return {number}\n     */\n    Utils.convertVelocity = function (velocity) {\n        // Max passed value limited to 100\n        velocity = velocity > 100 ? 100 : velocity;\n        return Math.round(velocity / 100 * 127);\n    };\n    /**\n     * Gets the total number of ticks of a specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {(string|array)} duration\n     * @return {number}\n     */\n    Utils.getTickDuration = function (duration) {\n        if (Array.isArray(duration)) {\n            // Recursively execute this method for each item in the array and return the sum of tick durations.\n            return duration.map(function (value) {\n                return Utils.getTickDuration(value);\n            }).reduce(function (a, b) {\n                return a + b;\n            }, 0);\n        }\n        duration = duration.toString();\n        if (duration.toLowerCase().charAt(0) === 't') {\n            // If duration starts with 't' then the number that follows is an explicit tick count\n            var ticks = parseInt(duration.substring(1));\n            if (isNaN(ticks) || ticks < 0) {\n                throw new Error(duration + ' is not a valid duration.');\n            }\n            return ticks;\n        }\n        // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION\n        var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);\n        var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);\n        return Utils.getRoundedIfClose(tickDuration);\n    };\n    /**\n     * Due to rounding errors in JavaScript engines,\n     * it's safe to round when we're very close to the actual tick number\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getRoundedIfClose = function (tick) {\n        var roundedTick = Math.round(tick);\n        return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;\n    };\n    /**\n     * Due to low precision of MIDI,\n     * we need to keep track of rounding errors in deltas.\n     * This function will calculate the rounding error for a given duration.\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getPrecisionLoss = function (tick) {\n        var roundedTick = Math.round(tick);\n        return roundedTick - tick;\n    };\n    /**\n     * Gets what to multiple ticks/quarter note by to get the specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {string} duration\n     * @return {number}\n     */\n    Utils.getDurationMultiplier = function (duration) {\n        // Need to apply duration here.\n        // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.\n        if (duration === '0')\n            return 0;\n        var match = duration.match(/^(?<dotted>d+)?(?<base>\\d+)(?:t(?<tuplet>\\d*))?/);\n        if (match) {\n            var base = Number(match.groups.base);\n            // 1 or any power of two:\n            var isValidBase = base === 1 || ((base & (base - 1)) === 0);\n            if (isValidBase) {\n                // how much faster or slower is this note compared to a quarter?\n                var ratio = base / 4;\n                var durationInQuarters = 1 / ratio;\n                var _a = match.groups, dotted = _a.dotted, tuplet = _a.tuplet;\n                if (dotted) {\n                    var thisManyDots = dotted.length;\n                    var divisor = Math.pow(2, thisManyDots);\n                    durationInQuarters = durationInQuarters + (durationInQuarters * ((divisor - 1) / divisor));\n                }\n                if (typeof tuplet === 'string') {\n                    var fitInto = durationInQuarters * 2;\n                    // default to triplet:\n                    var thisManyNotes = Number(tuplet || '3');\n                    durationInQuarters = fitInto / thisManyNotes;\n                }\n                return durationInQuarters;\n            }\n        }\n        throw new Error(duration + ' is not a valid duration.');\n    };\n    return Utils;\n}());\n\n/**\n * Holds all data for a \"controller change\" MIDI event\n * @param {object} fields {controllerNumber: integer, controllerValue: integer, delta: integer}\n * @return {ControllerChangeEvent}\n */\nvar ControllerChangeEvent = /** @class */ (function () {\n    function ControllerChangeEvent(fields) {\n        this.channel = fields.channel - 1 || 0;\n        this.controllerValue = fields.controllerValue;\n        this.controllerNumber = fields.controllerNumber;\n        this.delta = fields.delta || 0x00;\n        this.name = 'ControllerChangeEvent';\n        this.status = 0xB0;\n        this.data = Utils.numberToVariableLength(fields.delta).concat(this.status | this.channel, this.controllerNumber, this.controllerValue);\n    }\n    return ControllerChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CopyrightEvent}\n */\nvar CopyrightEvent = /** @class */ (function () {\n    function CopyrightEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CopyrightEvent';\n        this.text = fields.text;\n        this.type = 0x02;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CopyrightEvent;\n}());\n\n/**\n * Object representation of a cue point meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CuePointEvent}\n */\nvar CuePointEvent = /** @class */ (function () {\n    function CuePointEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CuePointEvent';\n        this.text = fields.text;\n        this.type = 0x07;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CuePointEvent;\n}());\n\n/**\n * Object representation of a end track meta event.\n * @param {object} fields {delta: integer}\n * @return {EndTrackEvent}\n */\nvar EndTrackEvent = /** @class */ (function () {\n    function EndTrackEvent(fields) {\n        this.delta = (fields === null || fields === void 0 ? void 0 : fields.delta) || 0x00;\n        this.name = 'EndTrackEvent';\n        this.type = [0x2F, 0x00];\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type);\n    }\n    return EndTrackEvent;\n}());\n\n/**\n * Object representation of an instrument name meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {InstrumentNameEvent}\n */\nvar InstrumentNameEvent = /** @class */ (function () {\n    function InstrumentNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'InstrumentNameEvent';\n        this.text = fields.text;\n        this.type = 0x04;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return InstrumentNameEvent;\n}());\n\n/**\n * Object representation of a key signature meta event.\n * @return {KeySignatureEvent}\n */\nvar KeySignatureEvent = /** @class */ (function () {\n    function KeySignatureEvent(sf, mi) {\n        this.name = 'KeySignatureEvent';\n        this.type = 0x59;\n        var mode = mi || 0;\n        sf = sf || 0;\n        //\tFunction called with string notation\n        if (typeof mi === 'undefined') {\n            var fifths = [\n                ['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'],\n                ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']\n            ];\n            var _sflen = sf.length;\n            var note = sf || 'C';\n            if (sf[0] === sf[0].toLowerCase())\n                mode = 1;\n            if (_sflen > 1) {\n                switch (sf.charAt(_sflen - 1)) {\n                    case 'm':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '-':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case 'M':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '+':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                }\n            }\n            var fifthindex = fifths[mode].indexOf(note);\n            sf = fifthindex === -1 ? 0 : fifthindex - 7;\n        }\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x02], // Size\n        Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)\n        Utils.numberToBytes(mode, 1));\n    }\n    return KeySignatureEvent;\n}());\n\n/**\n * Object representation of a lyric meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {LyricEvent}\n */\nvar LyricEvent = /** @class */ (function () {\n    function LyricEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'LyricEvent';\n        this.text = fields.text;\n        this.type = 0x05;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return LyricEvent;\n}());\n\n/**\n * Object representation of a marker meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {MarkerEvent}\n */\nvar MarkerEvent = /** @class */ (function () {\n    function MarkerEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'MarkerEvent';\n        this.text = fields.text;\n        this.type = 0x06;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return MarkerEvent;\n}());\n\n/**\n * Holds all data for a \"note on\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOnEvent}\n */\nvar NoteOnEvent = /** @class */ (function () {\n    function NoteOnEvent(fields) {\n        this.name = 'NoteOnEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.wait = fields.wait || 0;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.delta = null;\n        this.data = fields.data;\n        this.status = 0x90;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOnEvent}\n     */\n    NoteOnEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        this.data = [];\n        // Explicitly defined startTick event\n        if (this.tick) {\n            this.tick = Utils.getRoundedIfClose(this.tick);\n            // If this is the first event in the track then use event's starting tick as delta.\n            if (track.tickPointer == 0) {\n                this.delta = this.tick;\n            }\n        }\n        else {\n            this.delta = Utils.getTickDuration(this.wait);\n            this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOnEvent;\n}());\n\n/**\n * Holds all data for a \"note off\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOffEvent}\n */\nvar NoteOffEvent = /** @class */ (function () {\n    function NoteOffEvent(fields) {\n        this.name = 'NoteOffEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.data = fields.data;\n        this.delta = fields.delta || Utils.getTickDuration(fields.duration);\n        this.status = 0x80;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOffEvent}\n     */\n    NoteOffEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        if (this.tick === null) {\n            this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOffEvent;\n}());\n\n/**\n * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.\n * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}\n * @return {NoteEvent}\n */\nvar NoteEvent = /** @class */ (function () {\n    function NoteEvent(fields) {\n        this.data = [];\n        this.name = 'NoteEvent';\n        this.pitch = Utils.toArray(fields.pitch);\n        this.channel = fields.channel || 1;\n        this.duration = fields.duration || '4';\n        this.grace = fields.grace;\n        this.repeat = fields.repeat || 1;\n        this.sequential = fields.sequential || false;\n        this.tick = fields.startTick || fields.tick || null;\n        this.velocity = fields.velocity || 50;\n        this.wait = fields.wait || 0;\n        this.tickDuration = Utils.getTickDuration(this.duration);\n        this.restDuration = Utils.getTickDuration(this.wait);\n        this.events = []; // Hold actual NoteOn/NoteOff events\n    }\n    /**\n     * Builds int array for this event.\n     * @return {NoteEvent}\n     */\n    NoteEvent.prototype.buildData = function () {\n        var _this = this;\n        // Reset data array\n        this.data = [];\n        // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same\n        if (this.grace) {\n            var graceDuration_1 = 1;\n            this.grace = Utils.toArray(this.grace);\n            this.grace.forEach(function () {\n                var noteEvent = new NoteEvent({ pitch: _this.grace, duration: 'T' + graceDuration_1 });\n                _this.data = _this.data.concat(noteEvent.data);\n            });\n        }\n        // fields.pitch could be an array of pitches.\n        // If so create note events for each and apply the same duration.\n        // By default this is a chord if it's an array of notes that requires one NoteOnEvent.\n        // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.\n        if (!this.sequential) {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                // Note on\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew;\n                    if (i == 0) {\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: _this.wait,\n                            delta: Utils.getTickDuration(_this.wait),\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    else {\n                        // Running status (can ommit the note on status)\n                        //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: 0,\n                            delta: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    _this.events.push(noteOnNew);\n                });\n                // Note off\n                this.pitch.forEach(function (p, i) {\n                    var noteOffNew;\n                    if (i == 0) {\n                        //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: _this.duration,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    else {\n                        // Running status (can omit the note off status)\n                        //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    _this.events.push(noteOffNew);\n                });\n            }\n        }\n        else {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew = new NoteOnEvent({\n                        channel: _this.channel,\n                        wait: (i > 0 ? 0 : _this.wait),\n                        delta: (i > 0 ? 0 : Utils.getTickDuration(_this.wait)),\n                        velocity: _this.velocity,\n                        pitch: p,\n                        tick: _this.tick,\n                    });\n                    var noteOffNew = new NoteOffEvent({\n                        channel: _this.channel,\n                        duration: _this.duration,\n                        velocity: _this.velocity,\n                        pitch: p,\n                    });\n                    _this.events.push(noteOnNew, noteOffNew);\n                });\n            }\n        }\n        return this;\n    };\n    return NoteEvent;\n}());\n\n/**\n * Holds all data for a \"Pitch Bend\" MIDI event\n * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]\n * @param {object} fields { bend : float, channel : int, delta: int }\n * @return {PitchBendEvent}\n */\nvar PitchBendEvent = /** @class */ (function () {\n    function PitchBendEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.name = 'PitchBendEvent';\n        this.status = 0xE0;\n        var bend14 = this.scale14bits(fields.bend);\n        var lsbValue = bend14 & 0x7f;\n        var msbValue = (bend14 >> 7) & 0x7f;\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, lsbValue, msbValue);\n    }\n    PitchBendEvent.prototype.scale14bits = function (zeroOne) {\n        if (zeroOne <= 0) {\n            return Math.floor(16384 * (zeroOne + 1) / 2);\n        }\n        return Math.floor(16383 * (zeroOne + 1) / 2);\n    };\n    return PitchBendEvent;\n}());\n\n/**\n * Holds all data for a \"program change\" MIDI event\n * @param {object} fields {instrument: integer, delta: integer}\n * @return {ProgramChangeEvent}\n */\nvar ProgramChangeEvent = /** @class */ (function () {\n    function ProgramChangeEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.instrument = fields.instrument;\n        this.status = 0xC0;\n        this.name = 'ProgramChangeEvent';\n        // delta time defaults to 0.\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, this.instrument);\n    }\n    return ProgramChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {bpm: integer, delta: integer}\n * @return {TempoEvent}\n */\nvar TempoEvent = /** @class */ (function () {\n    function TempoEvent(fields) {\n        this.bpm = fields.bpm;\n        this.delta = fields.delta || 0x00;\n        this.tick = fields.tick;\n        this.name = 'TempoEvent';\n        this.type = 0x51;\n        var tempo = Math.round(60000000 / this.bpm);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, [0x03], // Size\n        Utils.numberToBytes(tempo, 3));\n    }\n    return TempoEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TextEvent}\n */\nvar TextEvent = /** @class */ (function () {\n    function TextEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.text = fields.text;\n        this.name = 'TextEvent';\n        this.type = 0x01;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TextEvent;\n}());\n\n/**\n * Object representation of a time signature meta event.\n * @return {TimeSignatureEvent}\n */\nvar TimeSignatureEvent = /** @class */ (function () {\n    function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {\n        this.name = 'TimeSignatureEvent';\n        this.type = 0x58;\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x04], // Size\n        Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes\n        Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes\n        Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes\n        Utils.numberToBytes(notespermidiclock || 8, 1));\n    }\n    return TimeSignatureEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TrackNameEvent}\n */\nvar TrackNameEvent = /** @class */ (function () {\n    function TrackNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'TrackNameEvent';\n        this.text = fields.text;\n        this.type = 0x03;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TrackNameEvent;\n}());\n\n/**\n * Holds all data for a track.\n * @param {object} fields {type: number, data: array, size: array, events: array}\n * @return {Track}\n */\nvar Track = /** @class */ (function () {\n    function Track() {\n        this.type = Constants.TRACK_CHUNK_TYPE;\n        this.data = [];\n        this.size = [];\n        this.events = [];\n        this.explicitTickEvents = [];\n        // If there are any events with an explicit tick defined then we will create a \"sub\" track for those\n        // and merge them in and the end.\n        this.tickPointer = 0; // Each time an event is added this will increase\n    }\n    /**\n     * Adds any event type to the track.\n     * Events without a specific startTick property are assumed to be added in order of how they should output.\n     * Events with a specific startTick property are set aside for now will be merged in during build process.\n     *\n     * TODO: Don't put startTick events in their own array.  Just lump everything together and sort it out during buildData();\n     * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.\n     * @param {Function} mapFunction - Callback which can be used to apply specific properties to all events.\n     * @return {Track}\n     */\n    Track.prototype.addEvent = function (events, mapFunction) {\n        var _this = this;\n        Utils.toArray(events).forEach(function (event, i) {\n            if (event instanceof NoteEvent) {\n                // Handle map function if provided\n                if (typeof mapFunction === 'function') {\n                    var properties = mapFunction(i, event);\n                    if (typeof properties === 'object') {\n                        Object.assign(event, properties);\n                    }\n                }\n                // If this note event has an explicit startTick then we need to set aside for now\n                if (event.tick !== null) {\n                    _this.explicitTickEvents.push(event);\n                }\n                else {\n                    // Push each on/off event to track's event stack\n                    event.buildData().events.forEach(function (e) { return _this.events.push(e); });\n                }\n            }\n            else {\n                _this.events.push(event);\n            }\n        });\n        return this;\n    };\n    /**\n     * Builds int array of all events.\n     * @param {object} options\n     * @return {Track}\n     */\n    Track.prototype.buildData = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Reset\n        this.data = [];\n        this.size = [];\n        this.tickPointer = 0;\n        var precisionLoss = 0;\n        this.events.forEach(function (event) {\n            // Build event & add to total tick duration\n            if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {\n                var built = event.buildData(_this, precisionLoss, options);\n                precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);\n                _this.data = _this.data.concat(built.data);\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n            }\n            else if (event instanceof TempoEvent) {\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n                _this.data = _this.data.concat(event.data);\n            }\n            else {\n                _this.data = _this.data.concat(event.data);\n            }\n        });\n        this.mergeExplicitTickEvents();\n        // If the last event isn't EndTrackEvent, then tack it onto the data.\n        if (!this.events.length || !(this.events[this.events.length - 1] instanceof EndTrackEvent)) {\n            this.data = this.data.concat((new EndTrackEvent).data);\n        }\n        this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long\n        return this;\n    };\n    Track.prototype.mergeExplicitTickEvents = function () {\n        var _this = this;\n        if (!this.explicitTickEvents.length)\n            return;\n        // First sort asc list of events by startTick\n        this.explicitTickEvents.sort(function (a, b) { return a.tick - b.tick; });\n        // Now this.explicitTickEvents is in correct order, and so is this.events naturally.\n        // For each explicit tick event, splice it into the main list of events and\n        // adjust the delta on the following events so they still play normally.\n        this.explicitTickEvents.forEach(function (noteEvent) {\n            // Convert NoteEvent to it's respective NoteOn/NoteOff events\n            // Note that as we splice in events the delta for the NoteOff ones will\n            // Need to change based on what comes before them after the splice.\n            noteEvent.buildData().events.forEach(function (e) { return e.buildData(_this); });\n            // Merge each event individually into this track's event list.\n            noteEvent.events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        });\n        // Hacky way to rebuild track with newly spliced events.  Need better solution.\n        this.explicitTickEvents = [];\n        this.buildData();\n    };\n    /**\n     * Merges another track's events with this track.\n     * @param {Track} track\n     * @return {Track}\n     */\n    Track.prototype.mergeTrack = function (track) {\n        var _this = this;\n        // First build this track to populate each event's tick property\n        this.buildData();\n        // Then build track to be merged so that tick property is populated on all events & merge each event.\n        track.buildData().events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        return this;\n    };\n    /**\n     * Merges a single event into this track's list of events based on event.tick property.\n     * @param {AbstractEvent} - event\n     * @return {Track}\n     */\n    Track.prototype.mergeSingleEvent = function (event) {\n        // There are no events yet, so just add it in.\n        if (!this.events.length) {\n            this.addEvent(event);\n            return;\n        }\n        // Find index of existing event we need to follow with\n        var lastEventIndex;\n        for (var i = 0; i < this.events.length; i++) {\n            if (this.events[i].tick > event.tick)\n                break;\n            lastEventIndex = i;\n        }\n        var splicedEventIndex = lastEventIndex + 1;\n        // Need to adjust the delta of this event to ensure it falls on the correct tick.\n        event.delta = event.tick - this.events[lastEventIndex].tick;\n        // Splice this event at lastEventIndex + 1\n        this.events.splice(splicedEventIndex, 0, event);\n        // Now adjust delta of all following events\n        for (var i = splicedEventIndex + 1; i < this.events.length; i++) {\n            // Since each existing event should have a tick value at this point we just need to\n            // adjust delta to that the event still falls on the correct tick.\n            this.events[i].delta = this.events[i].tick - this.events[i - 1].tick;\n        }\n    };\n    /**\n     * Removes all events matching specified type.\n     * @param {string} eventName - Event type\n     * @return {Track}\n     */\n    Track.prototype.removeEventsByName = function (eventName) {\n        var _this = this;\n        this.events.forEach(function (event, index) {\n            if (event.name === eventName) {\n                _this.events.splice(index, 1);\n            }\n        });\n        return this;\n    };\n    /**\n     * Sets tempo of the MIDI file.\n     * @param {number} bpm - Tempo in beats per minute.\n     * @param {number} tick - Start tick.\n     * @return {Track}\n     */\n    Track.prototype.setTempo = function (bpm, tick) {\n        if (tick === void 0) { tick = 0; }\n        return this.addEvent(new TempoEvent({ bpm: bpm, tick: tick }));\n    };\n    /**\n     * Sets time signature.\n     * @param {number} numerator - Top number of the time signature.\n     * @param {number} denominator - Bottom number of the time signature.\n     * @param {number} midiclockspertick - Defaults to 24.\n     * @param {number} notespermidiclock - Defaults to 8.\n     * @return {Track}\n     */\n    Track.prototype.setTimeSignature = function (numerator, denominator, midiclockspertick, notespermidiclock) {\n        return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));\n    };\n    /**\n     * Sets key signature.\n     * @param {*} sf -\n     * @param {*} mi -\n     * @return {Track}\n     */\n    Track.prototype.setKeySignature = function (sf, mi) {\n        return this.addEvent(new KeySignatureEvent(sf, mi));\n    };\n    /**\n     * Adds text to MIDI file.\n     * @param {string} text - Text to add.\n     * @return {Track}\n     */\n    Track.prototype.addText = function (text) {\n        return this.addEvent(new TextEvent({ text: text }));\n    };\n    /**\n     * Adds copyright to MIDI file.\n     * @param {string} text - Text of copyright line.\n     * @return {Track}\n     */\n    Track.prototype.addCopyright = function (text) {\n        return this.addEvent(new CopyrightEvent({ text: text }));\n    };\n    /**\n     * Adds Sequence/Track Name.\n     * @param {string} text - Text of track name.\n     * @return {Track}\n     */\n    Track.prototype.addTrackName = function (text) {\n        return this.addEvent(new TrackNameEvent({ text: text }));\n    };\n    /**\n     * Sets instrument name of track.\n     * @param {string} text - Name of instrument.\n     * @return {Track}\n     */\n    Track.prototype.addInstrumentName = function (text) {\n        return this.addEvent(new InstrumentNameEvent({ text: text }));\n    };\n    /**\n     * Adds marker to MIDI file.\n     * @param {string} text - Marker text.\n     * @return {Track}\n     */\n    Track.prototype.addMarker = function (text) {\n        return this.addEvent(new MarkerEvent({ text: text }));\n    };\n    /**\n     * Adds cue point to MIDI file.\n     * @param {string} text - Text of cue point.\n     * @return {Track}\n     */\n    Track.prototype.addCuePoint = function (text) {\n        return this.addEvent(new CuePointEvent({ text: text }));\n    };\n    /**\n     * Adds lyric to MIDI file.\n     * @param {string} text - Lyric text to add.\n     * @return {Track}\n     */\n    Track.prototype.addLyric = function (text) {\n        return this.addEvent(new LyricEvent({ text: text }));\n    };\n    /**\n     * Channel mode messages\n     * @return {Track}\n     */\n    Track.prototype.polyModeOn = function () {\n        var event = new NoteOnEvent({ data: [0x00, 0xB0, 0x7E, 0x00] });\n        return this.addEvent(event);\n    };\n    /**\n     * Sets a pitch bend.\n     * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.\n     * @return {Track}\n     */\n    Track.prototype.setPitchBend = function (bend) {\n        return this.addEvent(new PitchBendEvent({ bend: bend }));\n    };\n    /**\n     * Adds a controller change event\n     * @param {number} number - Control number.\n     * @param {number} value - Control value.\n     * @param {number} channel - Channel to send controller change event on (1-based).\n     * @param {number} delta - Track tick offset for cc event.\n     * @return {Track}\n     */\n    Track.prototype.controllerChange = function (number, value, channel, delta) {\n        return this.addEvent(new ControllerChangeEvent({ controllerNumber: number, controllerValue: value, channel: channel, delta: delta }));\n    };\n    return Track;\n}());\n\nvar VexFlow = /** @class */ (function () {\n    function VexFlow() {\n    }\n    /**\n     * Support for converting VexFlow voice into MidiWriterJS track\n     * @return MidiWriter.Track object\n     */\n    VexFlow.prototype.trackFromVoice = function (voice, options) {\n        var _this = this;\n        if (options === void 0) { options = { addRenderedAccidentals: false }; }\n        var track = new Track;\n        var wait = [];\n        voice.tickables.forEach(function (tickable) {\n            if (tickable.noteType === 'n') {\n                track.addEvent(new NoteEvent({\n                    pitch: tickable.keys.map(function (pitch, index) { return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals); }),\n                    duration: _this.convertDuration(tickable),\n                    wait: wait\n                }));\n                // reset wait\n                wait = [];\n            }\n            else if (tickable.noteType === 'r') {\n                // move on to the next tickable and add this to the stack\n                // of the `wait` property for the next note event\n                wait.push(_this.convertDuration(tickable));\n            }\n        });\n        // There may be outstanding rests at the end of the track,\n        // pad with a ghost note (zero duration and velocity), just to capture the wait.\n        if (wait.length > 0) {\n            track.addEvent(new NoteEvent({ pitch: '[c4]', duration: '0', wait: wait, velocity: '0' }));\n        }\n        return track;\n    };\n    /**\n     * Converts VexFlow pitch syntax to MidiWriterJS syntax\n     * @param pitch string\n     * @param index pitch index\n     * @param note struct from Vexflow\n     * @param addRenderedAccidentals adds Vexflow rendered accidentals\n     */\n    VexFlow.prototype.convertPitch = function (pitch, index, note, addRenderedAccidentals) {\n        var _a;\n        if (addRenderedAccidentals === void 0) { addRenderedAccidentals = false; }\n        // Splits note name from octave\n        var pitchParts = pitch.split('/');\n        // Retrieves accidentals from pitch\n        // Removes natural accidentals since they are not accepted in Tonal Midi\n        var accidentals = pitchParts[0].substring(1).replace('n', '');\n        if (addRenderedAccidentals) {\n            (_a = note.getAccidentals()) === null || _a === void 0 ? void 0 : _a.forEach(function (accidental) {\n                if (accidental.index === index) {\n                    if (accidental.type === 'n') {\n                        accidentals = '';\n                    }\n                    else {\n                        accidentals += accidental.type;\n                    }\n                }\n            });\n        }\n        return pitchParts[0][0] + accidentals + pitchParts[1];\n    };\n    /**\n     * Converts VexFlow duration syntax to MidiWriterJS syntax\n     * @param note struct from VexFlow\n     */\n    VexFlow.prototype.convertDuration = function (note) {\n        return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');\n    };\n    /**\n     * Converts VexFlow base duration syntax to MidiWriterJS syntax\n     * @param duration Vexflow duration\n     * @returns MidiWriterJS duration\n     */\n    VexFlow.prototype.convertBaseDuration = function (duration) {\n        switch (duration) {\n            case 'w':\n                return '1';\n            case 'h':\n                return '2';\n            case 'q':\n                return '4';\n            default:\n                return duration;\n        }\n    };\n    return VexFlow;\n}());\n\n/**\n * Object representation of a header chunk section of a MIDI file.\n * @param {number} numberOfTracks - Number of tracks\n * @return {Header}\n */\nvar Header = /** @class */ (function () {\n    function Header(numberOfTracks) {\n        this.type = Constants.HEADER_CHUNK_TYPE;\n        var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;\n        this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,\n        Constants.HEADER_CHUNK_DIVISION);\n        this.size = [0, 0, 0, this.data.length];\n    }\n    return Header;\n}());\n\n/**\n * Object that puts together tracks and provides methods for file output.\n * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.\n * @param {object} options - {middleC: 'C4'}\n * @return {Writer}\n */\nvar Writer = /** @class */ (function () {\n    function Writer(tracks, options) {\n        if (options === void 0) { options = {}; }\n        // Ensure tracks is an array\n        this.tracks = Utils.toArray(tracks);\n        this.options = options;\n    }\n    /**\n     * Builds array of data from chunkschunks.\n     * @return {array}\n     */\n    Writer.prototype.buildData = function () {\n        var _this = this;\n        var data = [];\n        data.push(new Header(this.tracks.length));\n        // For each track add final end of track event and build data\n        this.tracks.forEach(function (track) {\n            data.push(track.buildData(_this.options));\n        });\n        return data;\n    };\n    /**\n     * Builds the file into a Uint8Array\n     * @return {Uint8Array}\n     */\n    Writer.prototype.buildFile = function () {\n        var build = [];\n        // Data consists of chunks which consists of data\n        this.buildData().forEach(function (d) { return build = build.concat(d.type, d.size, d.data); });\n        return new Uint8Array(build);\n    };\n    /**\n     * Convert file buffer to a base64 string.  Different methods depending on if browser or node.\n     * @return {string}\n     */\n    Writer.prototype.base64 = function () {\n        if (typeof btoa === 'function') {\n            var binary = '';\n            var bytes = this.buildFile();\n            var len = bytes.byteLength;\n            for (var i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        }\n        return Buffer.from(this.buildFile()).toString('base64');\n    };\n    /**\n     * Get the data URI.\n     * @return {string}\n     */\n    Writer.prototype.dataUri = function () {\n        return 'data:audio/midi;base64,' + this.base64();\n    };\n    /**\n     * Set option on instantiated Writer.\n     * @param {string} key\n     * @param {any} value\n     * @return {Writer}\n     */\n    Writer.prototype.setOption = function (key, value) {\n        this.options[key] = value;\n        return this;\n    };\n    /**\n     * Output to stdout\n     * @return {string}\n     */\n    Writer.prototype.stdout = function () {\n        return process.stdout.write(Buffer.from(this.buildFile()));\n    };\n    return Writer;\n}());\n\nvar main = {\n    Constants: Constants,\n    ControllerChangeEvent: ControllerChangeEvent,\n    CopyrightEvent: CopyrightEvent,\n    CuePointEvent: CuePointEvent,\n    EndTrackEvent: EndTrackEvent,\n    InstrumentNameEvent: InstrumentNameEvent,\n    KeySignatureEvent: KeySignatureEvent,\n    LyricEvent: LyricEvent,\n    MarkerEvent: MarkerEvent,\n    NoteOnEvent: NoteOnEvent,\n    NoteOffEvent: NoteOffEvent,\n    NoteEvent: NoteEvent,\n    PitchBendEvent: PitchBendEvent,\n    ProgramChangeEvent: ProgramChangeEvent,\n    TempoEvent: TempoEvent,\n    TextEvent: TextEvent,\n    TimeSignatureEvent: TimeSignatureEvent,\n    Track: Track,\n    TrackNameEvent: TrackNameEvent,\n    Utils: Utils,\n    VexFlow: VexFlow,\n    Writer: Writer\n};\n\nmodule.exports = main;\n", "// MidiGenerator.ts\r\nimport midiWriterJs from 'midi-writer-js';\r\n\r\n// Keep NoteData interface accessible or redefine if needed\r\ninterface NoteData {\r\n    midiNote: number;\r\n    startTimeTicks: number;\r\n    durationTicks: number;\r\n    velocity: number;\r\n}\r\n\r\n// --- Constants (can be private static or module-level) ---\r\nexport const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\nexport const INTERVALS = {\r\n    P1: 0,\r\n    m2: 1,\r\n    M2: 2,\r\n    m3: 3,\r\n    M3: 4,\r\n    P4: 5,\r\n    A4: 6,\r\n    d5: 6,\r\n    P5: 7,\r\n    A5: 8,\r\n    m6: 8,\r\n    M6: 9,\r\n    d7: 9,\r\n    m7: 10,\r\n    M7: 11,\r\n    P8: 12,\r\n    m9: 13,\r\n    M9: 14,\r\n    A9: 15,\r\n    P11: 17,\r\n    A11: 18,\r\n    m13: 20,\r\n    M13: 21\r\n};\r\nexport const CHORD_FORMULAS: Record<string, number[]> = {\r\n    // --- Basic Triads ---\r\n    '': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5], // Default to major\r\n    'maj': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5],\r\n    'M': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5], // Alias for major\r\n    'm': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5],\r\n    'min': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5], // Alias for minor\r\n    'dim': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5],\r\n    'aug': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5],\r\n    '+': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5], // Alias for augmented\r\n\r\n    // --- Suspended Chords ---\r\n    'sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5],\r\n    'sus': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5], // Alias for sus4\r\n    'sus2': [INTERVALS.P1, INTERVALS.M2, INTERVALS.P5],\r\n\r\n    // --- Power Chord ---\r\n    '5': [INTERVALS.P1, INTERVALS.P5],\r\n\r\n    // --- \"Add\" Chords (Triads + added note, no 7th) ---\r\n    'add2': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M2], // Major add 2 (often same sound as add9)\r\n    '(add2)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M2], // Alias for add2 with parentheses\r\n    'add4': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P4, INTERVALS.P5], // Major add 4\r\n    '(add4)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P4, INTERVALS.P5], // Alias for add4 with parentheses\r\n    'add9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M9], // Major add 9\r\n    '(add9)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M9], // Alias for add9 with parentheses\r\n    'm(add2)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M2], // Minor add 2\r\n    'm(add4)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P4, INTERVALS.P5], // Minor add 4\r\n    'm(add9)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M9], // Minor add 9\r\n    'madd2': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M2], // Alias for m(add2)\r\n    'madd9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M9], // Alias for m(add9)\r\n    // --- Popular additional chords ---\r\n    'sus2add9': [INTERVALS.P1, INTERVALS.M2, INTERVALS.P5, INTERVALS.M9], // Sus2 with added 9th\r\n    'm7add11': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.P11], // Minor 7th add 11\r\n    'maj7add13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M13], // Major 7th add 13\r\n    '7b13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.m13], // Dominant 7th flat 13\r\n    '7sus2': [INTERVALS.P1, INTERVALS.M2, INTERVALS.P5, INTERVALS.m7], // Dominant 7th sus2\r\n    '7sus2sus4': [INTERVALS.P1, INTERVALS.M2, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7], // Dominant 7th sus2sus4\r\n    '7#11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.A4], // Dominant 7th sharp 11\r\n    'mMaj9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], // Alias for m(maj9)\r\n\r\n    // --- Sixth Chords ---\r\n    '6': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M6], // Major 6th\r\n    'maj6': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M6], // Alias for Major 6th\r\n    'm6': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M6], // Minor 6th\r\n    'min6': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M6], // Alias for Minor 6th\r\n    '6/9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M6, INTERVALS.M9], // 6th chord with added 9th\r\n    'm6/9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M6, INTERVALS.M9], // Minor 6th chord with added 9th\r\n\r\n    // --- Seventh Chords ---\r\n    '7': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7], // Dominant 7th\r\n    'maj7': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7], // Major 7th\r\n    'M7': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7], // Alias for Major 7th\r\n    'm7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7], // Minor 7th\r\n    'min7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7], // Alias for Minor 7th\r\n    'm(maj7)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7], // Minor-Major 7th\r\n    'mM7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7], // Alias for Minor-Major 7th\r\n    'dim7': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5, INTERVALS.d7], // Diminished 7th (\u00BA7)\r\n    'm7b5': [INTERVALS.P1, INTERVALS.m3, INTERVALS.d5, INTERVALS.m7], // Half-diminished 7th (\u00F87)\r\n\r\n    // --- Ninth Chords ---\r\n    '9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], // Dominant 9th\r\n    'maj9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], // Major 9th\r\n    'M9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], // Alias for Major 9th\r\n    'm9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], // Minor 9th\r\n    'min9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], // Alias for Minor 9th\r\n    'm(maj9)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], // Minor-Major 9th\r\n    'mM9': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9], // Alias for Minor-Major 9th\r\n\r\n    // --- Eleventh Chords ---\r\n    // Note: Dominant 11 chords often omit the 3rd [P1, P5, m7, M9, P11]\r\n    // Note: Major 11 chords often omit 3rd or 5th [P1, P5, M7, M9, P11] or [P1, M7, M9, P11]\r\n    '11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.P11], // Dominant 11th (full theory)\r\n    'maj11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.P11], // Major 11th (full theory)\r\n    'M11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.P11], // Alias Major 11th\r\n    'm11': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.P11], // Minor 11th\r\n    'min11': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.P11], // Alias Minor 11th\r\n    'm(maj11)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.P11], // Minor-Major 11th\r\n    'mM11': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.P11], // Alias Minor-Major 11th\r\n\r\n    // --- Thirteenth Chords ---\r\n    // Note: 13 chords often omit the 11th and sometimes the 5th.\r\n    '13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], // Dominant 13th (omits 11th)\r\n    'maj13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.M13], // Major 13th (omits 11th)\r\n    'M13': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.M13], // Alias Major 13th\r\n    'm13': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], // Minor 13th (omits 11th)\r\n    'min13': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], // Alias Minor 13th\r\n    'm(maj13)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.M13], // Minor-Major 13th\r\n    'mM13': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.M13], // Alias Minor-Major 13th\r\n\r\n    // --- Altered/Extended Dominants & Others ---\r\n    '7b5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.d5, INTERVALS.m7],\r\n    '7#5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5, INTERVALS.m7], // Dominant 7th Augmented 5th\r\n    '7aug': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5, INTERVALS.m7], // Alias for 7#5\r\n    '7b9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.m9],\r\n    '7#9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.A9],\r\n    '7(#11)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.A4], // Often omits 5th: [P1, M3, m7, A4/A11]\r\n    '9b5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.d5, INTERVALS.m7, INTERVALS.M9],\r\n    '9#5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5, INTERVALS.m7, INTERVALS.M9],\r\n    '13b9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.m9, INTERVALS.M13],\r\n    '13#9': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.A9, INTERVALS.M13],\r\n    '13(#11)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.A4, INTERVALS.M13], // Original\r\n    '7b9b5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.d5, INTERVALS.m7, INTERVALS.m9],\r\n    '7b9#5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5, INTERVALS.m7, INTERVALS.m9],\r\n    '7#9b5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.d5, INTERVALS.m7, INTERVALS.A9],\r\n    '7#9#5': [INTERVALS.P1, INTERVALS.M3, INTERVALS.A5, INTERVALS.m7, INTERVALS.A9],\r\n    '7alt': [INTERVALS.P1, INTERVALS.M3, INTERVALS.m7, INTERVALS.m9, INTERVALS.A5], // Common Altered Dominant voicing (Root, 3, b7, b9, #5) - can vary!\r\n\r\n    // --- Altered/Extended Major/Minor & Others ---\r\n    'maj7(#11)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.A4], // Major 7 sharp 11\r\n    'M7#11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.A4], // Alias\r\n    'maj9(#11)': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.A4], // Major 9 sharp 11\r\n    'M9#11': [INTERVALS.P1, INTERVALS.M3, INTERVALS.P5, INTERVALS.M7, INTERVALS.M9, INTERVALS.A4], // Alias\r\n    'm7(#11)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.A4], // Minor 7 sharp 11\r\n    'm9(#11)': [INTERVALS.P1, INTERVALS.m3, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.A4], // Minor 9 sharp 11\r\n\r\n    // --- Suspended Variants ---\r\n    '7sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7],\r\n    '7sus': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7], // Alias\r\n    '9sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9],\r\n    '9sus': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9], // Alias\r\n    '13sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], // Original\r\n    '13sus': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.m7, INTERVALS.M9, INTERVALS.M13], // Alias\r\n    'maj7sus4': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.M7], // Major 7 sus 4\r\n    'M7sus': [INTERVALS.P1, INTERVALS.P4, INTERVALS.P5, INTERVALS.M7], // Alias\r\n};\r\n\r\nexport const TPQN = 128; // MIDI Writer JS default ticks per quarter note\r\nconst OCTAVE_ADJUSTMENT_THRESHOLD = 6; // Adjust if average pitch is > 6 semitones (half octave) away from target\r\n\r\n// Define the possible output types\r\nexport type OutputType = 'chordsOnly' | 'chordsAndBass' | 'bassOnly' | 'notesOnly';\r\nexport type InversionType = 'none' | 'first' | 'smooth' | 'pianist' | 'open' | 'spread' | 'cocktail';\r\n\r\nexport interface MidiGenerationOptions {\r\n    progressionString: string;\r\n    outputFileName?: string; // Optional, provide default\r\n    outputType: OutputType;\r\n    inversionType: InversionType;\r\n    baseOctave: number;\r\n    chordDurationStr?: string; // Optional, provide default\r\n    tempo: number;\r\n    velocity: number;\r\n    totalSteps?: number; // <-- Add this for step sequencer\r\n}\r\n\r\nexport interface MidiGenerationResult {\r\n    notesForPianoRoll: NoteData[];\r\n    midiBlob: Blob;\r\n    finalFileName: string;\r\n    chordDetails: ChordGenerationData[]; // New property to store detailed chord information\r\n}\r\n\r\n// Intermediate structure to hold chord data during generation\r\ninterface ChordGenerationData {\r\n    symbol: string;\r\n    startTimeTicks: number;\r\n    durationTicks: number;\r\n    initialVoicing: number[]; // Voicing after root/smooth logic\r\n    adjustedVoicing: number[]; // Voicing after octave adjustment\r\n    rootNoteName: string;\r\n    isValid: boolean;\r\n    calculatedBassNote: number | null; // Store the calculated bass note\r\n}\r\n\r\nexport class MidiGenerator {\r\n\r\n    private normalizeNoteName(note: string): string {\r\n        const name = note.toUpperCase();\r\n        switch (name) {\r\n            // Flats are converted to sharps here!\r\n            case 'DB': return 'C#';\r\n            case 'EB': return 'D#';\r\n            case 'FB': return 'E'; // Special case\r\n            case 'GB': return 'F#';\r\n            case 'AB': return 'G#';\r\n            case 'BB': return 'A#';\r\n            // Sharps that wrap around\r\n            case 'E#': return 'F';\r\n            case 'B#': return 'C';\r\n            default: return name; // Natural notes or already sharp notes pass through\r\n        }\r\n    }\r\n\r\n    private getNoteIndex(note: string): number {\r\n    // Normalize flats to sharps first (Db -> C#, Gb -> F#, etc.)\r\n    const normalizedNote = this.normalizeNoteName(note);\r\n    // Find the index in the CORRECTED 12-tone array\r\n    const index = NOTES.indexOf(normalizedNote);\r\n    if (index === -1) {\r\n         // Handle cases like E# (-> F) or B# (-> C) which might fail after normalization if not careful\r\n         // A more robust approach might be a direct map:\r\n         // throw new Error(`Invalid or unhandled note name after normalization: ${normalizedNote} (from ${note})`);\r\n         // Let's try re-normalizing for edge cases like B#:\r\n         const reNormalized = this.normalizeNoteName(normalizedNote); // e.g., B# -> C\r\n         const reIndex = NOTES.indexOf(reNormalized);\r\n         if (reIndex === -1) {\r\n             throw new Error(`Invalid note name: ${note} -> ${normalizedNote} -> ${reNormalized}`);\r\n         }\r\n         return reIndex;\r\n\r\n    }\r\n    return index;\r\n    }\r\n\r\n    private getMidiNote(noteName: string, octave: number): number {\r\n        const noteIndex = this.getNoteIndex(noteName);\r\n        const midiVal = 12 * (octave + 1) + noteIndex;\r\n        // Ensure note is within reasonable bounds, though final check happens later\r\n        if (midiVal < 0 || midiVal > 127) {\r\n             console.warn(`Calculated MIDI note ${midiVal} for ${noteName}${octave} is outside the standard 0-127 range.`);\r\n             // Return a value that will likely be filtered out later, or clamp/throw error\r\n             return midiVal; // Keep the value for now, filter later\r\n        }\r\n        return midiVal;\r\n    }\r\n\r\n    /**\r\n     * Converts a duration input string (bars, letter codes, or T-codes) to MIDI ticks.\r\n     * @param durationInput - The duration string (e.g., \"0.5\", \"1\", \"q\", \"8\", \"T128\").\r\n     *                        If undefined or empty, defaults to 1 bar.\r\n     * @returns The duration in MIDI ticks.\r\n     */\r\n    private getDurationTicks(durationInput?: string): number {\r\n        const beatsPerBar = 4; // Assuming 4/4 time signature\r\n        if (!durationInput || durationInput.trim() === \"\") {\r\n            return TPQN * beatsPerBar; // Default to 1 bar (4 beats)\r\n        }\r\n\r\n        const input = durationInput.trim();\r\n\r\n        // Try parsing as a number first (assumed to be in bars)\r\n        const numericBarValue = parseFloat(input);\r\n        if (!isNaN(numericBarValue) && numericBarValue > 0) {\r\n            return TPQN * beatsPerBar * numericBarValue;\r\n        }\r\n\r\n        // Removed all shorthand and descriptive cases, keeping only decimal values\r\n        switch (input.toLowerCase()) {\r\n            case '0.25': return TPQN / 4;   // 0.25 bars\r\n            case '0.5': return TPQN / 2;    // 0.5 bars\r\n            case '0.75': return TPQN * 0.75; // 0.75 bars\r\n            case '1': return TPQN;        // 1 bar\r\n            case '1.5': return TPQN * 1.5; // 1.5 bars\r\n            case '2': return TPQN * 2;    // 2 bars\r\n            case '3': return TPQN * 3;   // 3 bars\r\n            case '4': return TPQN * 4;    // 4 bars\r\n            default:\r\n                // Check for T-codes (absolute ticks)\r\n                if (/^t\\d+$/i.test(input)) {\r\n                    return parseInt(input.substring(1), 10);\r\n                }\r\n                console.warn(`Unknown duration: \"${input}\". Defaulting to 1 bar (${TPQN * beatsPerBar} ticks).`);\r\n                return TPQN * beatsPerBar; // Default to 1 bar\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates all possible inversions for a given set of root-position chord notes.\r\n     * @param rootPositionNotes - Array of MIDI notes in root position, sorted low to high.\r\n     * @returns An array of voicings (each an array of MIDI notes), starting with root position.\r\n     */\r\n    private generateInversions(rootPositionNotes: number[]): number[][] {\r\n        if (rootPositionNotes.length <= 1) {\r\n            return [rootPositionNotes]; // No inversions possible/needed\r\n        }\r\n        const allInversions: number[][] = [];\r\n        let currentVoicing = [...rootPositionNotes]; // Start with root position\r\n\r\n        // Generate N inversions (including root position) for an N-note chord\r\n        for (let i = 0; i < rootPositionNotes.length; i++) {\r\n            // Ensure it's sorted before adding\r\n            currentVoicing.sort((a, b) => a - b);\r\n            allInversions.push([...currentVoicing]); // Add a copy\r\n\r\n            // Prepare next inversion (if not the last one)\r\n            if (i < rootPositionNotes.length - 1) {\r\n                const lowestNote = currentVoicing.shift(); // Remove lowest\r\n                if (lowestNote !== undefined) {\r\n                    currentVoicing.push(lowestNote + 12); // Add it back an octave higher\r\n                }\r\n            }\r\n        }\r\n        return allInversions;\r\n    }\r\n\r\n    /**\r\n     * Calculates a distance metric between two chord voicings to estimate smoothness.\r\n     * A lower score means a smoother transition.\r\n     * This simple version sums the absolute MIDI pitch differences of corresponding notes.\r\n     * It penalizes differences in the number of notes.\r\n     * @param voicing1 - First voicing (array of MIDI notes, sorted).\r\n     * @param voicing2 - Second voicing (array of MIDI notes, sorted).\r\n     * @returns A numeric score representing the distance.\r\n     */\r\n    private calculateVoicingDistance(voicing1: number[], voicing2: number[]): number {\r\n        const sorted1 = [...voicing1].sort((a, b) => a - b);\r\n        const sorted2 = [...voicing2].sort((a, b) => a - b);\r\n        let totalDistance = 0;\r\n        const minLength = Math.min(sorted1.length, sorted2.length);\r\n        const maxLength = Math.max(sorted1.length, sorted2.length);\r\n        for (let i = 0; i < minLength; i++) { totalDistance += Math.abs(sorted1[i] - sorted2[i]); }\r\n        const noteCountDifference = maxLength - minLength;\r\n        totalDistance += noteCountDifference * 6; // Penalty factor\r\n        return totalDistance;\r\n    }\r\n\r\n    /**\r\n     * Adjusts chord voicings to be closer to the target octave.\r\n     * @param voicings - Array of chord voicings (arrays of MIDI notes).\r\n     * @param baseOctave - The desired base octave (e.g., 3, 4).\r\n     * @returns A new array with adjusted voicings.\r\n     */\r\n    private adjustVoicingsToTargetOctave(voicings: number[][], baseOctave: number): number[][] {\r\n        if (!voicings || voicings.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        // Target the C note in the base octave as the center\r\n        const targetCenterPitch = this.getMidiNote('C', baseOctave); // e.g., C4 = 60\r\n\r\n        return voicings.map(voicing => {\r\n            if (!voicing || voicing.length === 0) {\r\n                return []; // Keep empty voicings as they are\r\n            }\r\n\r\n            // Calculate average pitch of the current voicing\r\n            const sum = voicing.reduce((acc, note) => acc + note, 0);\r\n            const averagePitch = sum / voicing.length;\r\n\r\n            // Calculate difference from target center and determine octave shift needed\r\n            const difference = averagePitch - targetCenterPitch;\r\n            // Only adjust if the average is significantly far from the target\r\n            if (Math.abs(difference) > OCTAVE_ADJUSTMENT_THRESHOLD) {\r\n                const octaveShift = Math.round(difference / 12); // Number of octaves to shift\r\n                if (octaveShift !== 0) {\r\n                    const semitoneShift = octaveShift * -12; // Shift in opposite direction of difference\r\n                    const adjustedVoicing = voicing.map(note => note + semitoneShift);\r\n\r\n                    // Basic check to prevent shifting notes completely out of MIDI range\r\n                    const minNote = Math.min(...adjustedVoicing);\r\n                    const maxNote = Math.max(...adjustedVoicing);\r\n                    if (minNote >= 0 && maxNote <= 127) {\r\n                        // console.log(`Adjusting voicing avg ${averagePitch.toFixed(1)} towards ${targetCenterPitch} by ${semitoneShift} semitones.`);\r\n                        return adjustedVoicing.sort((a, b) => a - b);\r\n                    } else {\r\n                        // console.log(`Skipping adjustment for voicing avg ${averagePitch.toFixed(1)} - shift ${semitoneShift} would go out of range.`);\r\n                        return voicing.sort((a, b) => a - b); // Keep original if shift goes out of bounds, but ensure sorted\r\n                    }\r\n                }\r\n            }\r\n            // No significant shift needed, return original voicing (ensure sorted)\r\n            return voicing.sort((a, b) => a - b);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculates the appropriate bass note MIDI value for a given chord, prioritizing smooth transitions\r\n     * and ensuring it's distinct from the main chord voicing when necessary.\r\n     * @param chordData - The data for the current chord.\r\n     * @param baseOctave - The target base octave for the *chords*.\r\n     * @param inversionType - The type of inversion used for the chord voicing.\r\n     * @param previousBassNote - The MIDI value of the previous bass note, if available.\r\n     * @param outputType - The requested output type.\r\n     * @param chordVoicing - The actual MIDI notes of the chord's adjusted voicing.\r\n     * @returns The MIDI note number for the bass note, or null if none could be determined.\r\n     */\r\n    private calculateBassNote(\r\n        chordData: ChordGenerationData,\r\n        baseOctave: number,\r\n        inversionType: InversionType,\r\n        previousBassNote: number | null,\r\n        outputType: OutputType,\r\n        chordVoicing: number[] // Pass the actual chord voicing\r\n    ): number | null {\r\n        if (!chordData.isValid || !chordData.rootNoteName) {\r\n            return null;\r\n        }\r\n\r\n        // --- Smooth Bass Logic (Prioritize if requested) ---\r\n        if (inversionType === 'smooth' && previousBassNote !== null) {\r\n            const potentialBassNotes = [];\r\n            // Check octaves around the previous bass note's estimated octave\r\n            const prevOctave = Math.floor((previousBassNote - 12) / 12); // Estimate octave\r\n            for (let octave = prevOctave - 1; octave <= prevOctave + 1; octave++) {\r\n                const bassNote = this.getMidiNote(chordData.rootNoteName, octave);\r\n                if (bassNote >= 0 && bassNote <= 127) {\r\n                    potentialBassNotes.push(bassNote);\r\n                }\r\n            }\r\n            if (potentialBassNotes.length > 0) {\r\n                const chosenBassNote = potentialBassNotes.reduce((closest, note) =>\r\n                    Math.abs(note - previousBassNote) < Math.abs(closest - previousBassNote) ? note : closest\r\n                );\r\n                // For smooth, we accept the closest, even if it might coincide with a chord tone sometimes\r\n                if (chosenBassNote >= 0 && chosenBassNote <= 127) {\r\n                    return chosenBassNote;\r\n                }\r\n                // Fall through to default calculation if smoothing failed to find a valid note\r\n            }\r\n        }\r\n\r\n        // --- Default/Fallback Bass Note Calculation (Non-Smooth or Failed Smooth) ---\r\n        const defaultBassOctave = baseOctave - 1; // Default target: one octave below chord base\r\n        let chosenBassNote = this.getMidiNote(chordData.rootNoteName, defaultBassOctave);\r\n\r\n        // Check if the default bass note is *in* the chord voicing (and the voicing isn't empty)\r\n        if (chordVoicing.length > 0 && chordVoicing.includes(chosenBassNote)) {\r\n            const lowerBassNote = this.getMidiNote(chordData.rootNoteName, defaultBassOctave - 1); // Try one octave lower\r\n            // Use the lower note only if it's valid and *different* from the original attempt\r\n            if (lowerBassNote >= 0 && lowerBassNote <= 127 && lowerBassNote !== chosenBassNote) {\r\n                // console.log(`Bass note ${chosenBassNote} for ${chordData.symbol} coincided with chord voicing. Using lower octave: ${lowerBassNote}`);\r\n                chosenBassNote = lowerBassNote;\r\n            } else {\r\n                // console.log(`Bass note ${chosenBassNote} for ${chordData.symbol} coincided with chord voicing. Lower octave ${lowerBassNote} is invalid or same. Keeping original.`);\r\n                // Stick with the original calculated note, even if it's in the chord, if the lower octave is invalid/same.\r\n            }\r\n        }\r\n\r\n        // --- Final Range Check ---\r\n        if (chosenBassNote < 0 || chosenBassNote > 127) {\r\n            console.warn(`Calculated bass note ${chosenBassNote} for \"${chordData.symbol}\" is out of range. Trying higher octave.`);\r\n            // As a last resort, try the octave *above* the default target if the primary attempts failed\r\n            const higherBassNote = this.getMidiNote(chordData.rootNoteName, defaultBassOctave + 1);\r\n            if (higherBassNote >= 0 && higherBassNote <= 127 && !chordVoicing.includes(higherBassNote)) {\r\n                return higherBassNote;\r\n            }\r\n            console.error(`Could not determine a valid bass note for \"${chordData.symbol}\".`);\r\n            return null; // Give up if all attempts fail\r\n        }\r\n\r\n        return chosenBassNote;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates MIDI data and note array from provided options.\r\n     * @param options - The settings for MIDI generation.\r\n     * @returns Object containing notesForPianoRoll, midiBlob, and finalFileName, or throws an error.\r\n     */\r\n    public generate(options: MidiGenerationOptions): MidiGenerationResult {\r\n        const {\r\n            progressionString,\r\n            outputFileName,\r\n            outputType,\r\n            inversionType,\r\n            baseOctave,\r\n            chordDurationStr,\r\n            tempo,\r\n            velocity,\r\n            totalSteps // <-- Add this for step sequencer\r\n        } = options;\r\n\r\n        if (!progressionString || progressionString.trim() === '') {\r\n            throw new Error(\"Chord progression cannot be empty.\");\r\n        }\r\n\r\n        let finalFileName;\r\n        if (outputFileName) {\r\n            finalFileName = outputFileName.endsWith('.mid') ? outputFileName : `${outputFileName}.mid`;\r\n        } else {\r\n            const sanitizedProgressionString = progressionString.replace(/\\s+/g, '_').replace(/:/g, '-');\r\n            finalFileName = `${sanitizedProgressionString}_${String(outputType)}_${String(inversionType)}.mid`;\r\n        }\r\n\r\n        // --- Special handling for notesOnly mode ---\r\n        if (outputType === 'notesOnly') {\r\n            // Each entry: note:P#:L#:V# (e.g. C4:P1:L1:V100)\r\n            const noteEntries = progressionString.trim().split(/\\s+/);\r\n            interface NoteEvent { midiNote: number; startStep: number; length: number; velocity: number; }\r\n            const events: NoteEvent[] = [];\r\n            let maxStep = 0;\r\n            for (const entry of noteEntries) {\r\n                // Format: NOTE:P#:L#:V#\r\n                const parts = entry.split(':');\r\n                let note = 'C4';\r\n                let pos = 0;\r\n                let len = 1;\r\n                let vel = velocity;\r\n                for (const part of parts) {\r\n                    if (/^[A-G][#b]?\\d+$|^\\d+$/.test(part)) note = part;\r\n                    else if (/^P(\\d+)$/i.test(part)) pos = parseInt(part.slice(1), 10) - 1;\r\n                    else if (/^L(\\d+)$/i.test(part)) len = parseInt(part.slice(1), 10);\r\n                    else if (/^V(\\d+)$/i.test(part)) vel = parseInt(part.slice(1), 10);\r\n                }\r\n                const noteNameMatch = note.match(/^([A-G][#b]?)(\\d+)$/i);\r\n                if (!noteNameMatch) continue;\r\n                const noteName = noteNameMatch[1];\r\n                const octave = parseInt(noteNameMatch[2], 10);\r\n                const midiNote = this.getMidiNote(noteName, octave);\r\n                events.push({ midiNote, startStep: pos, length: len, velocity: vel });\r\n                if (pos + len > maxStep) maxStep = pos + len;\r\n            }\r\n            // --- Use totalSteps if provided, else fallback to maxStep or 16 ---\r\n            if (options.totalSteps && options.totalSteps > maxStep) {\r\n                maxStep = options.totalSteps;\r\n            } else if (maxStep < 16) {\r\n                maxStep = 16;\r\n            }\r\n            // Group events by step for simultaneity\r\n            const stepMap: Record<number, NoteEvent[]> = {};\r\n            for (const ev of events) {\r\n                for (let i = 0; i < ev.length; ++i) {\r\n                    const step = ev.startStep + i;\r\n                    if (!stepMap[step]) stepMap[step] = [];\r\n                    stepMap[step].push({ ...ev, startStep: step, length: 1 });\r\n                }\r\n            }\r\n            // Build MIDI\r\n            const TPQN = 128;\r\n            const stepTicks = TPQN / 4; // 16 steps = 4 bars, 4 steps per bar, 1 step = 1/4 note\r\n            const track = new midiWriterJs.Track();\r\n            track.setTempo(tempo);\r\n            track.setTimeSignature(4, 4, 24, 8);\r\n            const notesForPianoRoll: NoteData[] = [];\r\n            let waitSteps = 0;\r\n            for (let step = 0; step < maxStep; ++step) {\r\n                const eventsAtStep = stepMap[step] || [];\r\n                if (eventsAtStep.length > 0) {\r\n                    const pitches = eventsAtStep.map(ev => ev.midiNote);\r\n                    const velocities = eventsAtStep.map(ev => ev.velocity);\r\n                    const velocity = velocities.length > 0 ? Math.max(...velocities) : 100;\r\n                    const noteEventOptions: any = {\r\n                        pitch: pitches,\r\n                        duration: 'T' + stepTicks,\r\n                        velocity: velocity\r\n                    };\r\n                    if (waitSteps > 0) {\r\n                        noteEventOptions.wait = 'T' + (waitSteps * stepTicks);\r\n                        waitSteps = 0;\r\n                    }\r\n                    track.addEvent(new midiWriterJs.NoteEvent(noteEventOptions));\r\n                    eventsAtStep.forEach(ev => {\r\n                        notesForPianoRoll.push({\r\n                            midiNote: ev.midiNote,\r\n                            startTimeTicks: step * stepTicks,\r\n                            durationTicks: stepTicks,\r\n                            velocity: ev.velocity\r\n                        });\r\n                    });\r\n                } else {\r\n                    waitSteps++;\r\n                }\r\n            }\r\n            const writer = new midiWriterJs.Writer([track]);\r\n            const midiDataBytes = writer.buildFile();\r\n            const midiBlob = new Blob([midiDataBytes], { type: 'audio/midi' });\r\n            return { notesForPianoRoll, midiBlob, finalFileName, chordDetails: [] };\r\n        }\r\n\r\n        // const chordDurationTicks = this.getDurationTicks(chordDurationStr); // OLD\r\n        const chordEntries = progressionString.trim().split(/\\s+/); // NEW: e.g., [\"Am:0.5\", \"G:1\", \"C\"]\r\n        const chordRegex = /^([A-G][#b]?)(.*)$/;\r\n\r\n        const generatedChords: ChordGenerationData[] = [];\r\n        let currentTick = 0;\r\n        let previousChordVoicing: number[] | null = null;\r\n        let previousBassNote: number | null = null; // Track previous bass note\r\n\r\n        // --- Step 1: Generate Initial Voicings (Root or Smoothed) ---\r\n        for (const entry of chordEntries) {\r\n            if (!entry) continue;\r\n\r\n            const parts = entry.split(':');\r\n            const chordSymbol = parts[0];\r\n            // Use duration from entry, or fallback to chordDurationStr, or undefined\r\n            const durationString = parts.length > 1 ? parts[1] : chordDurationStr;\r\n\r\n            const currentChordDurationTicks = this.getDurationTicks(durationString);\r\n\r\n            const match = chordSymbol.match(chordRegex);\r\n            let chordData: ChordGenerationData = {\r\n                symbol: chordSymbol,\r\n                startTimeTicks: currentTick,\r\n                durationTicks: currentChordDurationTicks,\r\n                initialVoicing: [],\r\n                adjustedVoicing: [],\r\n                rootNoteName: '',\r\n                isValid: false,\r\n                calculatedBassNote: null // Initialize bass note\r\n            };\r\n\r\n            if (!match) {\r\n                console.warn(`Could not parse chord symbol: \"${chordSymbol}\" in entry \"${entry}\". Skipping.`);\r\n                generatedChords.push(chordData);\r\n                currentTick += currentChordDurationTicks;\r\n                previousChordVoicing = null;\r\n                continue;\r\n            }\r\n\r\n            const rootNoteName = match[1];\r\n            let qualityAndExtensions = match[2];\r\n            chordData.rootNoteName = rootNoteName;\r\n\r\n            try {\r\n                const rootMidi = this.getMidiNote(rootNoteName, baseOctave);\r\n                let formulaIntervals = CHORD_FORMULAS[qualityAndExtensions];\r\n\r\n                if (formulaIntervals === undefined) {\r\n                    if (qualityAndExtensions === '') {\r\n                        formulaIntervals = CHORD_FORMULAS['maj'];\r\n                        qualityAndExtensions = 'maj';\r\n                    } else {\r\n                        console.warn(`Chord quality \"${qualityAndExtensions}\" not found for \"${chordSymbol}\". Defaulting to major triad.`);\r\n                        formulaIntervals = CHORD_FORMULAS['maj'];\r\n                    }\r\n                }\r\n\r\n                let rootPositionNotes = formulaIntervals.map(intervalSemitones => rootMidi + intervalSemitones)\r\n                    .sort((a, b) => a - b);\r\n\r\n                let currentChordVoicing = [...rootPositionNotes];\r\n\r\n                // Apply inversion logic based on type\r\n                if (inversionType === 'first' && currentChordVoicing.length > 1) {\r\n                    const lowestNote = currentChordVoicing.shift();\r\n                    if (lowestNote !== undefined) { currentChordVoicing.push(lowestNote + 12); }\r\n                    currentChordVoicing.sort((a, b) => a - b);\r\n                } else if (inversionType === 'smooth') {\r\n                    if (!previousChordVoicing && currentChordVoicing.length > 1) {\r\n                        // Adjust the first chord towards the target octave\r\n                        currentChordVoicing = this.adjustVoicingsToTargetOctave([currentChordVoicing], baseOctave)[0];\r\n                    } else if (previousChordVoicing && currentChordVoicing.length > 1) {\r\n                        const possibleInversions = this.generateInversions(rootPositionNotes);\r\n                        let bestVoicing = currentChordVoicing; // Default to root position adjusted\r\n                        let minDistance = Infinity;\r\n\r\n                        // Adjust the *target* (previous) voicing to the base octave for a fair comparison anchor\r\n                        const targetPreviousVoicing = this.adjustVoicingsToTargetOctave([previousChordVoicing], baseOctave)[0];\r\n\r\n                        for (const inversion of possibleInversions) {\r\n                            // Adjust each potential inversion to the target octave before comparing\r\n                            const adjustedInversion = this.adjustVoicingsToTargetOctave([inversion], baseOctave)[0];\r\n                            const distance = this.calculateVoicingDistance(targetPreviousVoicing, adjustedInversion);\r\n                            if (distance < minDistance) {\r\n                                minDistance = distance;\r\n                                bestVoicing = adjustedInversion; // This is the best voicing *in the target octave*\r\n                            }\r\n                        }\r\n                        currentChordVoicing = bestVoicing;\r\n                    } else {\r\n                         // Handle single note chords or if previousChordVoicing is null after the first chord\r\n                         currentChordVoicing = this.adjustVoicingsToTargetOctave([currentChordVoicing], baseOctave)[0];\r\n                    }\r\n                } else if (inversionType === 'pianist') {\r\n                    // Pianist mode with basic voice anchoring\r\n                    const root = currentChordVoicing[0];\r\n                    const topVoices = currentChordVoicing.slice(1).map(n => n - 12);\r\n                    const SPREAD_BASE = 12; \r\n\r\n                    if (previousChordVoicing && topVoices.length > 1) {\r\n                        // Generate inversions of top voices only\r\n                        const possibleVoicings = this.generateInversions(topVoices);\r\n                        let bestTopVoicing = topVoices;\r\n                        let minDistance = Infinity;\r\n\r\n                        for (const inversion of possibleVoicings) {\r\n                            const spreadInversion = inversion.map((note, i) => note + SPREAD_BASE + i * 2);\r\n                            const testVoicing = [root, ...spreadInversion];\r\n                            const distance = this.calculateVoicingDistance(previousChordVoicing, testVoicing);\r\n                            if (distance < minDistance) {\r\n                                minDistance = distance;\r\n                                bestTopVoicing = spreadInversion;\r\n                            }\r\n                        }\r\n                        currentChordVoicing = [root, ...bestTopVoicing].sort((a, b) => a - b);\r\n                    } \r\n                    else \r\n                    {\r\n                        const spreadTop = topVoices.map((note, i) => note + SPREAD_BASE + i * 2);\r\n                        currentChordVoicing = [root, ...spreadTop].sort((a, b) => a - b);\r\n                    }\r\n                } else if (inversionType === 'open') {\r\n                    // Open voicing: Drop the 3rd or 5th down an octave\r\n                    if (currentChordVoicing.length > 2) {\r\n                        currentChordVoicing[1] -= 12; // Drop the 3rd down an octave\r\n                        currentChordVoicing.sort((a, b) => a - b);\r\n                    }\r\n                } else if (inversionType === 'spread') {\r\n                    // Spread voicing: 3rds and 7ths spread across two octaves\r\n                    const root = currentChordVoicing[0];\r\n                    const spreadNotes = currentChordVoicing.slice(1).map((note, i) => note + 12 * (i % 2));\r\n                    currentChordVoicing = [root, ...spreadNotes].sort((a, b) => a - b);\r\n                } else if (inversionType === 'cocktail') {\r\n                    // Cocktail voicing: Root+7th in left hand, upper melody tone\r\n                    const root = currentChordVoicing[0];\r\n                    const seventh = currentChordVoicing.length > 3 ? currentChordVoicing[3] : currentChordVoicing[1];\r\n                    const melody = currentChordVoicing[currentChordVoicing.length - 1];\r\n                    currentChordVoicing = [root, seventh, melody].sort((a, b) => a - b);\r\n                }\r\n\r\n                chordData.initialVoicing = [...currentChordVoicing]; // Store the result of inversion/smoothing\r\n                chordData.isValid = true;\r\n                previousChordVoicing = [...currentChordVoicing]; // Update previous for next iteration's smoothing\r\n\r\n            } catch (error: any) {\r\n                console.error(`Error processing chord \"${chordSymbol}\" in entry \"${entry}\": ${error.message}.`);\r\n                previousChordVoicing = null;\r\n                // chordData remains isValid = false\r\n            }\r\n\r\n            generatedChords.push(chordData);\r\n            currentTick += currentChordDurationTicks;\r\n        } // End Step 1 loop\r\n\r\n\r\n        // --- Step 2: Apply Post-Processing Octave Adjustment (if not already done during 'smooth') ---\r\n        // Note: 'smooth' now adjusts during the smoothing process itself.\r\n        // We still need to adjust 'none' and 'first' inversions here.\r\n        let finalVoicings: number[][];\r\n        if (inversionType === 'none' || inversionType === 'first') {\r\n            const initialVoicings = generatedChords.map(cd => cd.initialVoicing);\r\n            finalVoicings = this.adjustVoicingsToTargetOctave(initialVoicings, baseOctave);\r\n        } else { // 'smooth' voicings are already adjusted relative to the previous chord during step 1\r\n            finalVoicings = generatedChords.map(cd => cd.initialVoicing); // Use the already-adjusted initialVoicing\r\n        }\r\n\r\n        // Store final voicings back into generatedChords and calculate bass notes\r\n        generatedChords.forEach((cd, index) => {\r\n            // Ensure the final voicing is sorted\r\n            cd.adjustedVoicing = (finalVoicings[index] || []).sort((a, b) => a - b);\r\n            // Calculate and store the bass note needed for Step 3\r\n            if (cd.isValid) {\r\n                cd.calculatedBassNote = this.calculateBassNote(\r\n                    cd,\r\n                    baseOctave,\r\n                    inversionType,\r\n                    previousBassNote,\r\n                    outputType,\r\n                    cd.adjustedVoicing // <-- Pass the adjusted voicing here\r\n                );\r\n                previousBassNote = cd.calculatedBassNote; // Update previous bass note\r\n            }\r\n        });\r\n\r\n\r\n        // --- Step 3: Build MIDI Track and Piano Roll Data from Final Voicings ---\r\n        const track = new midiWriterJs.Track();\r\n        track.setTempo(tempo);\r\n        track.setTimeSignature(4, 4, 24, 8);\r\n        const notesForPianoRoll: NoteData[] = [];\r\n\r\n        for (const chordData of generatedChords) {\r\n            if (!chordData.isValid) {\r\n                // Add a rest if the chord symbol was invalid\r\n                track.addEvent(new midiWriterJs.NoteEvent({ pitch: [], wait: 'T' + chordData.durationTicks, duration: 'T0', velocity: 0 }));\r\n                continue;\r\n            }\r\n\r\n            let eventMidiNotes: number[] = [];\r\n\r\n            // Determine notes based on outputType\r\n            switch (outputType) {\r\n                case 'chordsOnly':\r\n                    eventMidiNotes = [...chordData.adjustedVoicing];\r\n                    break;\r\n                case 'chordsAndBass':\r\n                    eventMidiNotes = [...chordData.adjustedVoicing];\r\n                    if (chordData.calculatedBassNote !== null && !eventMidiNotes.includes(chordData.calculatedBassNote)) {\r\n                        eventMidiNotes.push(chordData.calculatedBassNote);\r\n                    }\r\n                    break;\r\n                case 'bassOnly':\r\n                    if (chordData.calculatedBassNote !== null) {\r\n                        eventMidiNotes = [chordData.calculatedBassNote];\r\n                    } else {\r\n                        eventMidiNotes = []; // No valid bass note found\r\n                        console.warn(`No valid bass note could be determined for \"${chordData.symbol}\". Adding rest.`);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // Final filtering and sorting: ensure all notes are within MIDI range 0-127 and remove duplicates\r\n            eventMidiNotes = eventMidiNotes\r\n                .filter(note => note >= 0 && note <= 127)\r\n                .sort((a, b) => a - b);\r\n            eventMidiNotes = [...new Set(eventMidiNotes)]; // Remove duplicates after sorting\r\n\r\n            if (eventMidiNotes.length > 0) {\r\n                // Add notes to piano roll data\r\n                eventMidiNotes.forEach(midiNote => {\r\n                    notesForPianoRoll.push({\r\n                        midiNote: midiNote,\r\n                        startTimeTicks: chordData.startTimeTicks,\r\n                        durationTicks: chordData.durationTicks,\r\n                        velocity: velocity\r\n                    });\r\n                });\r\n                // Add MIDI event\r\n                track.addEvent(new midiWriterJs.NoteEvent({\r\n                    pitch: eventMidiNotes,\r\n                    duration: 'T' + chordData.durationTicks,\r\n                    velocity: velocity\r\n                }));\r\n            } else {\r\n                // Add a rest if filtering removed all notes or if bassOnly had no note\r\n                if (outputType !== 'bassOnly') { // Only warn if chords were expected\r\n                     console.warn(`No valid MIDI notes remained for chord \"${chordData.symbol}\" after final filtering. Adding rest.`);\r\n                }\r\n                track.addEvent(new midiWriterJs.NoteEvent({ pitch: [], wait: 'T' + chordData.durationTicks, duration: 'T0', velocity: 0 }));\r\n            }\r\n        } // End Step 3 loop\r\n\r\n\r\n        // --- Step 4: Generate MIDI Blob ---\r\n        const writer = new midiWriterJs.Writer([track]);\r\n        const midiDataBytes = writer.buildFile();\r\n        const midiBlob = new Blob([midiDataBytes], { type: 'audio/midi' });\r\n\r\n        return { notesForPianoRoll, midiBlob, finalFileName, chordDetails: generatedChords };\r\n    }\r\n}\r\n", "// Export ActiveNote interface\r\nexport interface ActiveNote {\r\n    midiNote: number;\r\n    velocity: number;\r\n    duration: number;\r\n    oscillators: OscillatorNode[];\r\n    noteGain: GainNode;\r\n    stopTime: number;\r\n}\r\n\r\n/**\r\n * A simple synthesizer class using the Web Audio API to play chords\r\n * with two detuned sawtooth oscillators per note for a basic analog synth vibe.\r\n */\r\nexport class SynthChordPlayer {\r\n    public audioContext: AudioContext | null = null;\r\n    private mainGainNode: GainNode | null = null;\r\n    private activeNotes: Set<ActiveNote> = new Set(); // Tracks currently playing/scheduled notes\r\n\r\n    /**\r\n     * Initializes the SynthChordPlayer.\r\n     * @param initialVolume - The initial master volume (0.0 to 1.0).\r\n     */\r\n    constructor(initialVolume: number = 0.5) {\r\n        try {\r\n            // Create the audio context and main gain node\r\n            this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n            this.mainGainNode = this.audioContext.createGain();\r\n            // Clamp initial volume\r\n            const clampedVolume = Math.max(0, Math.min(1, initialVolume));\r\n            this.mainGainNode.gain.setValueAtTime(clampedVolume, this.audioContext.currentTime);\r\n            this.mainGainNode.connect(this.audioContext.destination);\r\n        } catch (e) {\r\n            console.error(\"Web Audio API is not supported or could not be initialized.\", e);\r\n            // Handle the error appropriately in a real app (e.g., disable audio features)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the AudioContext if it's in a suspended state.\r\n     * This MUST be called in response to a user gesture (e.g., button click).\r\n     */\r\n    public ensureContextResumed(): Promise<void> {\r\n        if (this.audioContext && this.audioContext.state === 'suspended') {\r\n            console.log(\"Resuming AudioContext...\");\r\n            return this.audioContext.resume().then(() => {\r\n                console.log(\"AudioContext resumed successfully.\");\r\n            }).catch(e => console.error(\"Error resuming AudioContext:\", e));\r\n        }\r\n        return Promise.resolve(); // Context already running or not available\r\n    }\r\n\r\n    /**\r\n     * Converts a MIDI note number to its corresponding frequency in Hertz.\r\n     * @param midiNote - The MIDI note number (e.g., 60 for Middle C).\r\n     * @returns The frequency in Hz.\r\n     */\r\n    private midiNoteToFrequency(midiNote: number): number {\r\n        // Standard formula: A4 = 440Hz = MIDI note 69\r\n        return 440 * Math.pow(2, (midiNote - 69) / 12);\r\n    }\r\n\r\n    /**\r\n     * Plays a chord consisting of multiple MIDI notes.\r\n     * @param midiNotes - An array of MIDI note numbers for the chord.\r\n     * @param durationSeconds - How long the chord should play in seconds.\r\n     */\r\n    public playChord(midiNotes: number[], durationSeconds: number = 1.5): void {\r\n        if (!this.audioContext || !this.mainGainNode) {\r\n            console.error(\"AudioContext not available. Cannot play chord.\");\r\n            return;\r\n        }\r\n\r\n        const now = this.audioContext.currentTime;\r\n        const detuneAmount = 6; // Cents (adjust for desired thickness)\r\n\r\n        midiNotes.forEach(note => {\r\n            const baseFrequency = this.midiNoteToFrequency(note);\r\n\r\n            // --- Oscillators ---\r\n            const osc1 = this.audioContext!.createOscillator();\r\n            osc1.type = 'sawtooth';\r\n            osc1.frequency.setValueAtTime(baseFrequency, now);\r\n            osc1.detune.setValueAtTime(-detuneAmount, now); // Detune down\r\n\r\n            const osc2 = this.audioContext!.createOscillator();\r\n            osc2.type = 'sawtooth';\r\n            osc2.frequency.setValueAtTime(baseFrequency, now);\r\n            osc2.detune.setValueAtTime(detuneAmount, now); // Detune up\r\n\r\n            // --- Gain Node per Note (for envelope) ---\r\n            const noteGain = this.audioContext!.createGain();\r\n            const initialGain = 0.4; // Set volume to 50%\r\n            noteGain.gain.setValueAtTime(initialGain, now); // Sustain at 50% volume\r\n\r\n            // --- Connections ---\r\n            osc1.connect(noteGain);\r\n            osc2.connect(noteGain);\r\n            noteGain.connect(this.mainGainNode!); // Connect note's gain to master gain\r\n\r\n            // --- Tracking and Cleanup ---\r\n            const stopTime = now + durationSeconds;\r\n            const activeNote: ActiveNote = { midiNote: note, velocity: initialGain, duration: durationSeconds, oscillators: [osc1, osc2], noteGain, stopTime };\r\n            this.activeNotes.add(activeNote);\r\n\r\n            // Use 'onended' event for reliable cleanup after natural stop or manual stop\r\n            osc1.onended = () => {\r\n                if (this.activeNotes.has(activeNote)) {\r\n                    try {\r\n                        osc1.disconnect();\r\n                        osc2.disconnect();\r\n                        noteGain.disconnect();\r\n                    } catch (e) { /* Ignore errors if already disconnected */ }\r\n                    this.activeNotes.delete(activeNote);\r\n                }\r\n            };\r\n\r\n            // --- Start and Stop Scheduling ---\r\n            osc1.start(now);\r\n            osc2.start(now);\r\n            osc1.stop(stopTime); // Schedule oscillator hardware stop\r\n            osc2.stop(stopTime);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Starts playing a chord indefinitely until stopped manually.\r\n     * @param midiNotes - An array of MIDI note numbers for the chord.\r\n     */\r\n    public startChord(midiNotes: number[]): ActiveNote[] {\r\n        if (!this.audioContext || !this.mainGainNode) {\r\n            console.error(\"AudioContext not available. Cannot play chord.\");\r\n            return [];\r\n        }\r\n\r\n        const now = this.audioContext.currentTime;\r\n        const detuneAmount = 6; // Cents (adjust for desired thickness)\r\n        const activeNotes: ActiveNote[] = [];\r\n\r\n        midiNotes.forEach(note => {\r\n            const baseFrequency = this.midiNoteToFrequency(note);\r\n\r\n            const osc1 = this.audioContext!.createOscillator();\r\n            osc1.type = 'sawtooth';\r\n            osc1.frequency.setValueAtTime(baseFrequency, now);\r\n            osc1.detune.setValueAtTime(-detuneAmount, now);\r\n\r\n            const osc2 = this.audioContext!.createOscillator();\r\n            osc2.type = 'sawtooth';\r\n            osc2.frequency.setValueAtTime(baseFrequency, now);\r\n            osc2.detune.setValueAtTime(detuneAmount, now);\r\n\r\n            const noteGain = this.audioContext!.createGain();\r\n            const initialGain = 0.4;\r\n            noteGain.gain.setValueAtTime(initialGain, now);\r\n\r\n            osc1.connect(noteGain);\r\n            osc2.connect(noteGain);\r\n            noteGain.connect(this.mainGainNode!);\r\n\r\n            const activeNote: ActiveNote = { midiNote: note, velocity: initialGain, duration: Infinity, oscillators: [osc1, osc2], noteGain, stopTime: Infinity };\r\n            this.activeNotes.add(activeNote);\r\n            activeNotes.push(activeNote);\r\n\r\n            osc1.start(now);\r\n            osc2.start(now);\r\n        });\r\n\r\n        return activeNotes;\r\n    }\r\n\r\n    /**\r\n     * Stops specific active notes or all notes if none are specified.\r\n     * @param notesToStop - An array of ActiveNote objects to stop. Stops all if not provided.\r\n     */\r\n    public stopNotes(notesToStop?: ActiveNote[]): void {\r\n        if (!this.audioContext || this.activeNotes.size === 0) {\r\n            return; // Nothing to stop or context not ready\r\n        }\r\n\r\n        const now = this.audioContext.currentTime;\r\n        const fadeOutDuration = 0.05; // Very short fade to prevent clicks\r\n\r\n        const notes = notesToStop || Array.from(this.activeNotes);\r\n\r\n        notes.forEach(activeNote => {\r\n            // --- Immediate Gain Fade-out ---\r\n            activeNote.noteGain.gain.cancelScheduledValues(now);\r\n            activeNote.noteGain.gain.setValueAtTime(activeNote.noteGain.gain.value, now); // Pin current value\r\n            activeNote.noteGain.gain.exponentialRampToValueAtTime(0.0001, now + fadeOutDuration);\r\n\r\n            // --- Stop Oscillators ---\r\n            const manualStopTime = now + fadeOutDuration + 0.01;\r\n            activeNote.oscillators.forEach(osc => {\r\n                try {\r\n                    osc.stop(manualStopTime);\r\n                } catch (e) {\r\n                    // Ignore errors if oscillator is already stopped or in invalid state\r\n                }\r\n            });\r\n\r\n            // Cleanup\r\n            setTimeout(() => {\r\n                if (this.activeNotes.has(activeNote)) {\r\n                    try {\r\n                        activeNote.oscillators.forEach(osc => osc.disconnect());\r\n                        activeNote.noteGain.disconnect();\r\n                    } catch (e) {}\r\n                    this.activeNotes.delete(activeNote);\r\n                }\r\n            }, fadeOutDuration * 1000 + 10); // Small delay for safety\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Immediately stops all currently playing or scheduled sounds managed by this player.\r\n     * Applies a very short fade-out to prevent clicks.\r\n     */\r\n    public stopAll(): void {\r\n        if (!this.audioContext || this.activeNotes.size === 0) {\r\n            return; // Nothing to stop or context not ready\r\n        }\r\n\r\n        const now = this.audioContext.currentTime;\r\n        const fadeOutDuration = 0.05; // Very short fade to prevent clicks\r\n\r\n        console.log(`Stopping ${this.activeNotes.size} active notes...`);\r\n\r\n        this.activeNotes.forEach(activeNote => {\r\n            // Check if the note's natural stop time is already past\r\n            // (might happen with overlapping calls or timing issues)\r\n            if (now < activeNote.stopTime) {\r\n                 // --- Immediate Gain Fade-out ---\r\n                // Cancel any previously scheduled gain changes\r\n                activeNote.noteGain.gain.cancelScheduledValues(now);\r\n                // Set gain to current value and ramp down quickly\r\n                // Use linearRamp for faster cutoff if preferred:\r\n                // activeNote.noteGain.gain.linearRampToValueAtTime(0.0001, now + fadeOutDuration);\r\n                activeNote.noteGain.gain.setValueAtTime(activeNote.noteGain.gain.value, now); // Pin current value\r\n                activeNote.noteGain.gain.exponentialRampToValueAtTime(0.0001, now + fadeOutDuration);\r\n\r\n                // --- Stop Oscillators ---\r\n                // Schedule stop slightly after the gain ramp finishes\r\n                const manualStopTime = now + fadeOutDuration + 0.01;\r\n                activeNote.oscillators.forEach(osc => {\r\n                    try {\r\n                        // Cancel the original stop time\r\n                        osc.stop(manualStopTime);\r\n                    } catch (e) {\r\n                        // Ignore errors if oscillator is already stopped or in invalid state\r\n                        // console.warn(\"Error stopping oscillator:\", e);\r\n                    }\r\n                });\r\n            } else {\r\n                 // If natural stop time is past, ensure cleanup happens anyway\r\n                 // The onended event should handle this, but as a fallback:\r\n                 setTimeout(() => {\r\n                     if (this.activeNotes.has(activeNote)) {\r\n                        try {\r\n                            activeNote.oscillators.forEach(osc => osc.disconnect());\r\n                            activeNote.noteGain.disconnect();\r\n                        } catch(e) {}\r\n                        this.activeNotes.delete(activeNote);\r\n                     }\r\n                 }, 50); // Small delay for safety\r\n            }\r\n        });\r\n\r\n        // Clear the tracking set immediately. The 'onended' callbacks will handle\r\n        // the actual disconnection and final cleanup.\r\n        // Note: If onended proves unreliable after manual stop, explicit disconnection\r\n        // might be needed here, but onended is generally preferred.\r\n        this.activeNotes.clear();\r\n        console.log(\"Stop command issued for all active notes.\");\r\n    }\r\n\r\n    /**\r\n     * Sets the master volume.\r\n     * @param volume - The desired volume level (0.0 to 1.0).\r\n     */\r\n    public setVolume(volume: number): void {\r\n        if (this.mainGainNode && this.audioContext) {\r\n            const clampedVolume = Math.max(0, Math.min(1, volume));\r\n            // Use setTargetAtTime for slightly smoother volume changes if desired\r\n            // this.mainGainNode.gain.setTargetAtTime(clampedVolume, this.audioContext.currentTime, 0.01);\r\n            this.mainGainNode.gain.setValueAtTime(clampedVolume, this.audioContext.currentTime);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * Gets the current master volume.\r\n     * @returns The current volume level (0.0 to 1.0).\r\n     */\r\n    public getVolume(): number {\r\n        if (this.mainGainNode) {\r\n            return this.mainGainNode.gain.value;\r\n        }\r\n        return 0;\r\n    }\r\n}", "// PianoRollDrawer.ts\r\n\r\nimport { SynthChordPlayer } from './SynthChordPlayer';\r\n\r\n// Define or import the ActiveNote interface\r\ninterface ActiveNote {\r\n    midiNote: number;\r\n    velocity: number;\r\n    duration: number;\r\n    oscillators: OscillatorNode[];\r\n    noteGain: GainNode;\r\n    stopTime: number;\r\n}\r\n\r\ninterface NoteData {\r\n    midiNote: number;\r\n    startTimeTicks: number;\r\n    durationTicks: number;\r\n    velocity: number;\r\n}\r\n\r\ninterface PianoRollOptions {\r\n    noteColor?: string;\r\n    backgroundColor?: string;\r\n    gridColor?: string;\r\n}\r\n\r\nexport class PianoRollDrawer {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private options: Required<PianoRollOptions>; // Use Required to ensure all options have defaults\r\n    private lastDrawnNotes: NoteData[] = []; // Store notes for redraw on resize\r\n    private synthPlayer: SynthChordPlayer;\r\n\r\n    constructor(canvas: HTMLCanvasElement, initialOptions: PianoRollOptions = {}) {\r\n        const ctx = canvas.getContext('2d', { alpha: false });\r\n        if (!ctx) {\r\n            throw new Error(\"Could not get 2D context for canvas\");\r\n        }\r\n        this.canvas = canvas;\r\n        this.ctx = ctx;\r\n\r\n        // Set default options\r\n        this.options = {\r\n            noteColor: initialOptions.noteColor ?? '#2563eb',      // Default blue notes\r\n            backgroundColor: initialOptions.backgroundColor ?? '#f9fafb', // Default light gray background\r\n            gridColor: initialOptions.gridColor ?? '#e5e7eb'       // Default lighter gray grid\r\n        };\r\n\r\n        this.resize(); // Initial resize\r\n        this.synthPlayer = new SynthChordPlayer();\r\n    }\r\n\r\n    /**\r\n     * Resizes the canvas drawing buffer to match its display size and DPR.\r\n     * Also redraws the last drawn notes.\r\n     */\r\n    public resize(): void {\r\n        const dpr = window.devicePixelRatio || 1;\r\n        const displayWidth = this.canvas.clientWidth;\r\n        const displayHeight = this.canvas.clientHeight;\r\n\r\n        // Check if the canvas size actually changed to avoid unnecessary redraws\r\n        if (this.canvas.width !== displayWidth * dpr || this.canvas.height !== displayHeight * dpr) {\r\n            this.canvas.width = displayWidth * dpr;\r\n            this.canvas.height = displayHeight * dpr;\r\n            // Scale the context for drawing (important!)\r\n            this.ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\r\n        }\r\n         // Always redraw after resize attempt, as context transform might reset\r\n         this.draw(this.lastDrawnNotes);\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas and draws the provided notes.\r\n     * @param notesData - Array of notes to draw.\r\n     */\r\n    public draw(notesData: NoteData[]): void {\r\n        this.lastDrawnNotes = notesData; // Store for redraws\r\n        const { noteColor, backgroundColor, gridColor } = this.options;\r\n        const dpr = window.devicePixelRatio || 1;\r\n\r\n        // Use clientWidth/Height for calculations based on CSS pixels\r\n        const canvasWidth = this.canvas.clientWidth;\r\n        const canvasHeight = this.canvas.clientHeight;\r\n\r\n        // --- Clear Canvas ---\r\n        // Clear using the *drawing buffer* size (canvas.width/height)\r\n        // Need to save/restore transform to clear correctly if scaled\r\n        this.ctx.save();\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for clearing\r\n        this.ctx.fillStyle = backgroundColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.restore(); // Restore previous transform (scaled by DPR)\r\n\r\n        if (notesData.length === 0) {\r\n            this.drawEmptyMessage(\"No notes to display\");\r\n            return;\r\n        }\r\n\r\n        // --- Determine Range and Scale ---\r\n        let minMidi = 127;\r\n        let maxMidi = 0;\r\n        let maxTimeTicks = 0;\r\n        notesData.forEach(note => {\r\n            minMidi = Math.min(minMidi, note.midiNote);\r\n            maxMidi = Math.max(maxMidi, note.midiNote);\r\n            maxTimeTicks = Math.max(maxTimeTicks, note.startTimeTicks + note.durationTicks);\r\n        });\r\n\r\n        minMidi = Math.max(0, minMidi - 2); // Add pitch padding\r\n        maxMidi = Math.min(127, maxMidi + 2); // Add pitch padding\r\n        const midiRange = maxMidi - minMidi + 1;\r\n\r\n        // Add padding to the end time for visual spacing\r\n        if (maxTimeTicks > 0) {\r\n            maxTimeTicks += (maxTimeTicks * 0.02); // Add 2% padding to the time axis\r\n        } else {\r\n            maxTimeTicks = 1; // Avoid division by zero if there are notes but zero duration/time\r\n        }\r\n\r\n        // Calculate scaling factors based on CSS pixel dimensions\r\n        const noteHeight = canvasHeight / midiRange;\r\n        const timeScale = canvasWidth / maxTimeTicks; // pixels per tick\r\n\r\n        // --- Draw Grid ---\r\n        this.ctx.strokeStyle = gridColor;\r\n        this.ctx.lineWidth = 0.5; // Draw thin lines (will be scaled by DPR)\r\n\r\n        // Horizontal lines (pitch) - Draw lines for C notes\r\n        for (let midi = minMidi; midi <= maxMidi; midi++) {\r\n            if (midi % 12 === 0) { // If it's a C note\r\n                const y = canvasHeight - ((midi - minMidi + 0.5) * noteHeight);\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(0, y); // Use CSS pixel coords\r\n                this.ctx.lineTo(canvasWidth, y); // Use CSS pixel coords\r\n                this.ctx.stroke();\r\n            }\r\n        }\r\n        // TODO: Add vertical grid lines (e.g., per beat or measure) if desired\r\n\r\n        // --- Draw Notes ---\r\n        this.ctx.fillStyle = noteColor;\r\n        notesData.forEach(note => {\r\n            const x = note.startTimeTicks * timeScale;\r\n            const y = canvasHeight - ((note.midiNote - minMidi + 1) * noteHeight);\r\n            const width = note.durationTicks * timeScale;\r\n            const height = noteHeight;\r\n\r\n            // Draw using CSS pixel coordinates (context is already scaled)\r\n            // Add a minimum width/height for visibility\r\n            this.ctx.fillRect(\r\n                x,\r\n                y,\r\n                Math.max(1 / dpr, width - (1 / dpr)), // Small inset for visual separation\r\n                Math.max(1 / dpr, height - (1 / dpr))\r\n            );\r\n        });\r\n    }\r\n\r\n    /** Draws a message centered on the canvas. */\r\n    public drawEmptyMessage(message: string, color: string = '#6b7280'): void {\r\n        const canvasWidth = this.canvas.clientWidth;\r\n        const canvasHeight = this.canvas.clientHeight;\r\n        this.ctx.save();\r\n        // Apply scaling for text rendering based on DPR if needed, but often default works\r\n        // const dpr = window.devicePixelRatio || 1;\r\n        // this.ctx.setTransform(dpr, 0, 0, dpr, 0, 0); // Ensure transform is set correctly if scaling text\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.font = '14px sans-serif';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.textBaseline = 'middle';\r\n        // Use clientWidth/Height for positioning text in CSS pixels\r\n        this.ctx.fillText(message, canvasWidth / 2, canvasHeight / 2);\r\n        this.ctx.restore(); // Restore context state\r\n    }\r\n\r\n    /** Draws an error message centered on the canvas. */\r\n     public drawErrorMessage(message: string): void {\r\n        this.lastDrawnNotes = []; // Clear notes on error\r\n        const backgroundColor = this.options.backgroundColor;\r\n\r\n        // Clear canvas first\r\n        this.ctx.save();\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for clearing\r\n        this.ctx.fillStyle = backgroundColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.restore();\r\n\r\n        this.drawEmptyMessage(message, '#ef4444'); // red-500\r\n    }\r\n\r\n    public renderChordButtons(chords: string[], chordDetails: { symbol: string; startTimeTicks: number; durationTicks: number; initialVoicing: number[]; adjustedVoicing: number[]; rootNoteName: string; isValid: boolean; }[]): void {\r\n        const buttonContainer = document.getElementById('chordButtonContainer');\r\n        if (!buttonContainer) {\r\n            console.error('Chord button container not found!');\r\n            return;\r\n        }\r\n        buttonContainer.innerHTML = ''; // Clear existing buttons\r\n\r\n        const activeNotesMap = new Map<number, ActiveNote[]>(); // Map to track active notes per button\r\n\r\n        chords.forEach((chord, index) => {\r\n            const button = document.createElement('button');\r\n            button.className = 'btn btn-outline-primary m-1';\r\n            button.textContent = chord;\r\n\r\n            // When you click on the buttons, you should hear the sound of the corresponding chord.\r\n            button.addEventListener('mousedown', () => {\r\n                if (chordDetails && chordDetails[index]) {\r\n                    const midiNotes = chordDetails[index].adjustedVoicing;\r\n                    const activeNotes = this.synthPlayer.startChord(midiNotes); // Start the chord\r\n                    activeNotesMap.set(index, activeNotes); // Track active notes for this button\r\n                } else {\r\n                    console.warn(`No details available for chord at index ${index}`);\r\n                }\r\n            });\r\n\r\n            button.addEventListener('mouseup', () => {\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    this.synthPlayer.stopNotes(activeNotes); // Stop the chord\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n\r\n            button.addEventListener('mouseleave', () => {\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    this.synthPlayer.stopNotes(activeNotes); // Stop the chord if mouse leaves the button\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n\r\n            buttonContainer.appendChild(button);\r\n        });\r\n    }\r\n}\r\n", "import { CHORD_FORMULAS, TPQN } from './MidiGenerator';\r\n\r\nexport class ChordInfoModal {\r\n    public static generateModalHTML(): string {\r\n        const chordEntries = Object.entries(CHORD_FORMULAS);\r\n        let modalContent = '<div class=\"modal\" id=\"chordInfoModal\" tabindex=\"-1\">';\r\n        modalContent += '<div class=\"modal-dialog modal-lg modal-dialog-scrollable\">'; // Added modal-dialog-scrollable for potentially long content\r\n        modalContent += '<div class=\"modal-content\">';\r\n        modalContent += '<div class=\"modal-header\">';\r\n        modalContent += '<h5 class=\"modal-title\">Chord & Duration Information</h5>'; // Updated title\r\n        modalContent += '<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>';\r\n        modalContent += '</div>';\r\n        modalContent += '<div class=\"modal-body\">';\r\n\r\n        // --- Chord Durations Section ---\r\n        modalContent += '<h5>Chord Durations</h5>';\r\n        modalContent += '<p>Any positive decimal number is accepted (e.g., 0.33, 2.25, etc.). The value represents bars.</p>';\r\n        modalContent += '<table class=\"table table-bordered\">';\r\n        modalContent += '<thead><tr><th>Code</th><th>Description</th></tr></thead>';\r\n        modalContent += '<tbody>';\r\n        modalContent += '<tr><td><code>0.25</code></td><td>Quarter of a bar (e.g., sixteenth note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>0.5</code></td><td>Half a bar (e.g., eighth note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>0.75</code></td><td>Three-quarters of a bar (e.g., dotted eighth note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>1</code></td><td>One bar (e.g., quarter note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>1.5</code></td><td>One and a half bars (e.g., dotted quarter note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>2</code></td><td>Two bars (e.g., half note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>3</code></td><td>Three bars (e.g., dotted half note in 4/4)</td></tr>';\r\n        modalContent += '<tr><td><code>4</code></td><td>Four bars (e.g., whole note in 4/4)</td></tr>';\r\n        modalContent += '</tbody>';\r\n        modalContent += '</table>';\r\n\r\n        modalContent += '<p><strong>Advanced:</strong> Use absolute ticks for precise timing. Prepend with <code>T</code> (e.g., <code>T128</code> for a quarter note).</p>';\r\n        modalContent += '<table class=\"table table-bordered\">';\r\n        modalContent += '<thead><tr><th>Code</th><th>Description</th><th>Ticks</th></tr></thead>';\r\n        modalContent += '<tbody>';\r\n        modalContent += `<tr><td><code>T${TPQN / 4}</code></td><td>Sixteenth note</td><td>${TPQN / 4}</td></tr>`;\r\n        modalContent += `<tr><td><code>T${TPQN / 2}</code></td><td>Eighth note</td><td>${TPQN / 2}</td></tr>`;\r\n        modalContent += `<tr><td><code>T${TPQN}</code></td><td>Quarter note</td><td>${TPQN}</td></tr>`;\r\n        modalContent += `<tr><td><code>T${TPQN * 2}</code></td><td>Half note</td><td>${TPQN * 2}</code></td></tr>`;\r\n        modalContent += `<tr><td><code>T${TPQN * 4}</code></td><td>Whole note</td><td>${TPQN * 4}</td></tr>`;\r\n        modalContent += '</tbody>';\r\n        modalContent += '</table>';\r\n\r\n        modalContent += '<hr>'; // Separator\r\n\r\n        // --- Known Chord Formulas Section ---\r\n        modalContent += '<h5>Known Chord Qualities</h5>';\r\n        modalContent += '<p>The following chord qualities are recognized (case-insensitive). Chord symbols are generally <code>[RootNote][Quality]</code> (e.g., C, Cm, Cmaj7, Gsus, F#dim7). Root notes can be A-G, optionally followed by # (sharp) or b (flat).</p>';\r\n        modalContent += '<table class=\"table table-bordered\">';\r\n        modalContent += '<thead><tr><th>Quality</th><th>Intervals</th></tr></thead>';\r\n        modalContent += '<tbody>';\r\n        chordEntries.forEach(([chord, formula]) => {\r\n            modalContent += `<tr><td><strong>${chord || 'Major'}</strong></td><td>${formula.join(', ')}</td></tr>`;\r\n        });\r\n        modalContent += '</tbody>';\r\n        modalContent += '</table>';\r\n\r\n        modalContent += '</div>';\r\n        modalContent += '<div class=\"modal-footer\">';\r\n        modalContent += '<button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>';\r\n        modalContent += '</div>';\r\n        modalContent += '</div>';\r\n        modalContent += '</div>';\r\n        modalContent += '</div>';\r\n\r\n        return modalContent;\r\n    }\r\n\r\n    public static injectModalIntoDOM(): void {\r\n        const modalHTML = this.generateModalHTML();\r\n        const modalContainer = document.createElement('div');\r\n        modalContainer.innerHTML = modalHTML;\r\n        document.body.appendChild(modalContainer);\r\n    }\r\n}", "// ValidationUtils.ts\r\n// Shared validation helpers for note names, chord patterns, and durations\r\n\r\nimport { CHORD_FORMULAS } from './MidiGenerator';\r\n\r\nexport const ALL_POSSIBLE_NOTE_NAMES_FOR_VALIDATION = [\r\n    'C', 'C#', 'Db',\r\n    'D', 'D#', 'Eb',\r\n    'E', 'Fb',\r\n    'F', 'F#', 'Gb',\r\n    'G', 'G#', 'Ab',\r\n    'A', 'A#', 'Bb',\r\n    'B', 'Cb'\r\n];\r\n\r\nexport const VALID_DURATION_CODES = [\r\n    'w', '1', 'h', '2', 'dh', 'd2',\r\n    'q', '4', 'dq', 'd4', 'e', '8',\r\n    'de', 'd8', 's', '16'\r\n];\r\n\r\nexport function generateValidChordPattern(): RegExp {\r\n    const notePattern = ALL_POSSIBLE_NOTE_NAMES_FOR_VALIDATION.join('|');\r\n    const qualitiesPattern = Object.keys(CHORD_FORMULAS)\r\n        .filter(q => q)\r\n        .map(q => q.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))\r\n        .sort((a, b) => b.length - a.length)\r\n        .join('|');\r\n    return new RegExp(`^(${notePattern})(?:(${qualitiesPattern}))?$`, 'i');\r\n}", "import { MidiGenerator, MidiGenerationOptions, MidiGenerationResult, CHORD_FORMULAS, NOTES, OutputType, InversionType } from './MidiGenerator';\r\nimport { PianoRollDrawer } from './PianoRollDrawer';\r\nimport { SynthChordPlayer, ActiveNote } from './SynthChordPlayer';\r\nimport { ChordInfoModal } from './ChordInfoModal';\r\nimport { normalizeNoteName, getMidiNote, getNoteNameFromMidi } from './Utils';\r\nimport { ALL_POSSIBLE_NOTE_NAMES_FOR_VALIDATION, VALID_DURATION_CODES, generateValidChordPattern } from './ValidationUtils';\r\n\r\n// Keep NoteData interface accessible if needed by Main.ts directly\r\ninterface NoteData {\r\n    midiNote: number;\r\n    startTimeTicks: number;\r\n    durationTicks: number;\r\n    velocity: number;\r\n}\r\n\r\n/**\r\n * Creates a temporary link and clicks it to download a blob.\r\n * @param blob - The Blob to download.\r\n * @param filename - The desired filename for the download.\r\n */\r\nfunction triggerDownload(blob: Blob, filename: string): void {\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link); // Required for Firefox\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url); // Clean up\r\n}\r\n\r\nexport function setupChordProgressionSequencer() {\r\n    const form = document.getElementById('midiForm') as HTMLFormElement | null;\r\n    const statusDiv = document.getElementById('status');\r\n    const velocitySlider = document.getElementById('velocity') as HTMLInputElement | null;\r\n    const velocityValueSpan = document.getElementById('velocityValue');\r\n    const pianoRollCanvas = document.getElementById('pianoRollCanvas') as HTMLCanvasElement | null;\r\n    const downloadMidiOnlyButton = document.getElementById('downloadMidiOnlyButton') as HTMLButtonElement | null;\r\n    const chordIndicator = document.getElementById('chordIndicator');\r\n\r\n    if (!form || !statusDiv || !velocitySlider || !velocityValueSpan || !pianoRollCanvas || !downloadMidiOnlyButton) {\r\n        console.error(\"One or more required HTML elements not found!\");\r\n        if (statusDiv) statusDiv.textContent = \"Error: Could not initialize the application (missing elements).\";\r\n        return;\r\n    }\r\n\r\n    let pianoRollDrawer: PianoRollDrawer;\r\n    try {\r\n        pianoRollDrawer = new PianoRollDrawer(pianoRollCanvas);\r\n    } catch (error: any) {\r\n        console.error(\"Failed to initialize PianoRollDrawer:\", error);\r\n        if (statusDiv) {\r\n            statusDiv.textContent = `Error: Canvas setup failed - ${error.message}`;\r\n            statusDiv.classList.add('text-danger'); // Bootstrap's text-danger for error styling\r\n        }\r\n        pianoRollCanvas.style.border = '2px solid red'; // Visual indicator\r\n        return;\r\n    }\r\n\r\n    const midiGenerator = new MidiGenerator();\r\n    const synthChordPlayer = new SynthChordPlayer();\r\n    let lastGeneratedResult: MidiGenerationResult | null = null; // Store the last successful result\r\n    let lastGeneratedNotes: NoteData[] = []; // Store the last generated notes for playback\r\n    let lastGeneratedMidiBlob: Blob | null = null; // Store the generated MIDI blob in memory\r\n\r\n    // Ensure the audio context is resumed on user interaction\r\n    const resumeAudioContext = () => synthChordPlayer.ensureContextResumed();\r\n    document.addEventListener('click', resumeAudioContext, { once: true });\r\n\r\n    // --- Update velocity display ---\r\n    velocitySlider.addEventListener('input', (event) => {\r\n        velocityValueSpan.textContent = (event.target as HTMLInputElement).value;\r\n    });\r\n\r\n    // Update chord button click logic to show a visual indicator\r\n    const updateChordIndicator = (chord: string) => {\r\n        if (chordIndicator) {\r\n            chordIndicator.textContent = `Playing: ${chord}`;\r\n            chordIndicator.classList.add('text-primary');\r\n            setTimeout(() => {\r\n                chordIndicator.textContent = '';\r\n                chordIndicator.classList.remove('text-primary');\r\n            }, 2000); // Reset after 2 seconds\r\n        }\r\n    };\r\n\r\n    function validateChordProgression(progression: string): string {\r\n        const normalizedProgression = progression\r\n            .replace(/\\|/g, ' ') // Replace pipes with spaces\r\n            .replace(/->/g, ' ') // Replace arrows with spaces\r\n            .replace(/\\s*-\\s*/g, ' ') // Treat hyphens as separators for chords\r\n            .replace(/\\s+/g, ' ') // Normalize multiple spaces\r\n            .trim();\r\n\r\n        if (!normalizedProgression) {\r\n            return \"\"; // Allow empty progression to clear piano roll\r\n        }\r\n\r\n        const chordEntries = normalizedProgression.split(/\\s+/);\r\n        const validChordSymbolPattern = generateValidChordPattern();\r\n        const validatedEntries: string[] = [];\r\n\r\n        for (const entry of chordEntries) {\r\n            if (!entry) continue;\r\n\r\n            const parts = entry.split(':');\r\n            const chordSymbol = parts[0];\r\n            const durationStr = parts.length > 1 ? parts[1] : undefined;\r\n\r\n            if (!validChordSymbolPattern.test(chordSymbol)) {\r\n                throw new Error(`Invalid chord symbol: \"${chordSymbol}\" in entry \"${entry}\". Use formats like C, Cm, G7.`);\r\n            }\r\n\r\n            if (durationStr !== undefined) {\r\n                const numericDuration = parseFloat(durationStr);\r\n                const isValidNumeric = !isNaN(numericDuration) && numericDuration > 0;\r\n                const isKnownCode = VALID_DURATION_CODES.includes(durationStr.toLowerCase());\r\n                const isTCode = /^t\\d+$/i.test(durationStr);\r\n\r\n                if (!isValidNumeric && !isKnownCode && !isTCode) {\r\n                    throw new Error(`Invalid duration: \"${durationStr}\" for chord \"${chordSymbol}\". Use beats (e.g., 0.5, 1), codes (e.g., q, 8, d4), or T-codes (e.g., T128).`);\r\n                }\r\n                validatedEntries.push(`${chordSymbol}:${durationStr}`);\r\n            } else {\r\n                validatedEntries.push(chordSymbol); // No duration specified, MidiGenerator will use default\r\n            }\r\n        }\r\n        return validatedEntries.join(' ');\r\n    }\r\n\r\n    // --- Common function to get options and generate MIDI ---\r\n    const handleGeneration = (isDownloadOnly: boolean): void => {\r\n        const actionText = isDownloadOnly ? \"Generating MIDI file\" : \"Generating preview and MIDI\";\r\n        statusDiv.textContent = `${actionText}...`;\r\n        statusDiv.classList.remove('text-danger', 'text-success');\r\n        statusDiv.classList.add('text-muted'); // Bootstrap's text-muted for neutral status\r\n\r\n        try {\r\n            // 1. Get form data\r\n            const formData = new FormData(form);\r\n            const rawProgression = formData.get('progression') as string;\r\n            const validatedProgression = validateChordProgression(rawProgression);\r\n\r\n            const options: MidiGenerationOptions = {\r\n                progressionString: validatedProgression,\r\n                outputFileName: formData.get('outputFileName') as string || undefined, // Let generator handle default\r\n                outputType: formData.get('outputType') as OutputType,\r\n                inversionType: formData.get('inversionType') as InversionType,\r\n                baseOctave: parseInt(formData.get('baseOctave') as string, 10),\r\n                chordDurationStr: formData.get('chordDuration') as string,\r\n                tempo: parseInt(formData.get('tempo') as string, 10),\r\n                velocity: parseInt(formData.get('velocity') as string, 10)\r\n            };\r\n\r\n            // 2. Generate MIDI and Notes\r\n            const generationResult = midiGenerator.generate(options);\r\n            lastGeneratedResult = generationResult; // Store successful result\r\n            lastGeneratedNotes = generationResult.notesForPianoRoll; // Store notes for playback\r\n            const chordDetails = generationResult.chordDetails; // Access detailed chord information for further use\r\n            console.log('Chord Details:', chordDetails); // Example usage: log chord details to the console\r\n            lastGeneratedMidiBlob = generationResult.midiBlob; // Store the MIDI blob for playback\r\n\r\n            // Render chord buttons for the entire progression\r\n            const progressionChordSymbols = validatedProgression.split(' ').map(entry => entry.split(':')[0]);\r\n            pianoRollDrawer.renderChordButtons(progressionChordSymbols, chordDetails);\r\n\r\n            // 3. Update UI / Trigger Download\r\n            if (isDownloadOnly) {\r\n                triggerDownload(generationResult.midiBlob, generationResult.finalFileName);\r\n                statusDiv.textContent = `MIDI file \"${generationResult.finalFileName}\" download initiated.`;\r\n                statusDiv.classList.replace('text-muted', 'text-success'); // Bootstrap's text-success for success\r\n            } else {\r\n                pianoRollDrawer.draw(generationResult.notesForPianoRoll);\r\n                statusDiv.textContent = `Preview generated.`;\r\n                statusDiv.classList.replace('text-muted', 'text-success'); // Bootstrap's text-success for success\r\n            }\r\n\r\n        } catch (error: any) {\r\n            console.error(`Error during MIDI generation (${actionText}):`, error);\r\n            lastGeneratedResult = null; // Clear last result on error\r\n            lastGeneratedNotes = []; // Clear notes on error\r\n            lastGeneratedMidiBlob = null; // Clear MIDI blob on error\r\n            statusDiv.textContent = `Error: ${error.message || 'Failed to generate MIDI.'}`;\r\n            statusDiv.classList.replace('text-muted', 'text-danger'); // Bootstrap's text-danger for errors\r\n            pianoRollDrawer.drawErrorMessage(\"Error generating preview\"); // Use drawer's error display\r\n        }\r\n    };\r\n\r\n    // Modify renderChordButtons to handle chord playback while button is pressed\r\n    pianoRollDrawer.renderChordButtons = (chords, chordDetails) => {\r\n        const buttonContainer = document.getElementById('chordButtonContainer');\r\n        if (!buttonContainer) {\r\n            console.error('Chord button container not found!');\r\n            return;\r\n        }\r\n        buttonContainer.innerHTML = '';\r\n\r\n        const activeNotesMap = new Map<number, ActiveNote[]>(); // Map to track active notes per button\r\n\r\n        chords.forEach((chord, index) => {\r\n            const button = document.createElement('button');\r\n            button.className = 'btn btn-outline-primary m-1';\r\n            button.textContent = chord;\r\n\r\n            // Play chord on mousedown or touchstart\r\n            button.addEventListener('mousedown', () => {\r\n                if (chordDetails && chordDetails[index]) {\r\n                    const midiNotes = chordDetails[index].adjustedVoicing;\r\n                    const activeNotes = synthChordPlayer.startChord(midiNotes); // Start the chord\r\n                    activeNotesMap.set(index, activeNotes); // Track active notes for this button\r\n                } else {\r\n                    console.warn(`No details available for chord at index ${index}`);\r\n                }\r\n            });\r\n            button.addEventListener('touchstart', (event) => {\r\n                event.preventDefault(); // Prevent mouse event emulation\r\n                if (chordDetails && chordDetails[index]) {\r\n                    const midiNotes = chordDetails[index].adjustedVoicing;\r\n                    const activeNotes = synthChordPlayer.startChord(midiNotes); // Start the chord\r\n                    activeNotesMap.set(index, activeNotes); // Track active notes for this button\r\n                } else {\r\n                    console.warn(`No details available for chord at index ${index}`);\r\n                }\r\n            });\r\n\r\n            // Stop chord on mouseup or touchend\r\n            button.addEventListener('mouseup', () => {\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    synthChordPlayer.stopNotes(activeNotes); // Stop the chord\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n            button.addEventListener('touchend', (event) => {\r\n                event.preventDefault(); // Prevent mouse event emulation\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    synthChordPlayer.stopNotes(activeNotes); // Stop the chord\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n\r\n            // Stop chord if mouse leaves the button or touch is canceled\r\n            button.addEventListener('mouseleave', () => {\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    synthChordPlayer.stopNotes(activeNotes); // Stop the chord\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n            button.addEventListener('touchcancel', () => {\r\n                const activeNotes = activeNotesMap.get(index);\r\n                if (activeNotes) {\r\n                    synthChordPlayer.stopNotes(activeNotes); // Stop the chord\r\n                    activeNotesMap.delete(index); // Remove from tracking\r\n                }\r\n            });\r\n\r\n            buttonContainer.appendChild(button);\r\n        });\r\n    };\r\n\r\n    // --- Form Submission Handler (Generate Preview) ---\r\n    form.addEventListener('submit', (event) => {\r\n        event.preventDefault();\r\n        handleGeneration(false); // Generate preview + MIDI data\r\n    });\r\n\r\n    // --- Event Listener for \"Download MIDI Only\" Button ---\r\n    downloadMidiOnlyButton.addEventListener('click', (event) => {\r\n        event.preventDefault();\r\n        handleGeneration(true); // Generate MIDI data only for download\r\n    });\r\n\r\n    // Add event listeners to form inputs to trigger preview generation on change\r\n    const formInputs = form.querySelectorAll('input, select, textarea');\r\n    formInputs.forEach(input => {\r\n        input.addEventListener('change', () => {\r\n            handleGeneration(false); // Generate preview automatically\r\n        });\r\n    });\r\n\r\n    // // Add a 2-second delay for the progression text box\r\n    // const progressionInput = form.querySelector('textarea[name=\"progression\"]');\r\n    // if (progressionInput) {\r\n    //     let timeoutId: number;\r\n    //     progressionInput.addEventListener('input', () => {\r\n    //         clearTimeout(timeoutId);\r\n    //         timeoutId = window.setTimeout(() => {\r\n    //             handleGeneration(false); // Generate preview after delay\r\n    //         }, 2000);\r\n    //     });\r\n    // }\r\n\r\n    // --- Canvas Resize Listener ---\r\n    let resizeTimeout: number;\r\n    window.addEventListener('resize', () => {\r\n        clearTimeout(resizeTimeout);\r\n        // Debounce resize event\r\n        resizeTimeout = window.setTimeout(() => {\r\n            pianoRollDrawer.resize(); // Let the drawer handle resizing and redrawing\r\n        }, 100);\r\n    });\r\n\r\n    // --- Initial state ---\r\n    statusDiv.textContent = \"Enter a progression and click generate.\";\r\n    pianoRollDrawer.draw([]); // Draw empty initial state\r\n\r\n    const helpButton = document.getElementById('helpButton');\r\n    if (helpButton) {\r\n        helpButton.addEventListener('click', () => {\r\n            ChordInfoModal.injectModalIntoDOM();\r\n            // Ensure Bootstrap is imported or available globally\r\n            const modal = new (window as any).bootstrap.Modal(document.getElementById('chordInfoModal')!);\r\n            modal.show();\r\n        });\r\n    }\r\n}", "// Utils.ts\r\n// Shared utility functions for note name normalization, MIDI note conversion, and input parsing\r\n\r\nexport const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\n\r\n/**\r\n * Normalizes a note name (e.g., Db -> C#, Fb -> E, etc.)\r\n */\r\nexport function normalizeNoteName(note: string): string {\r\n    const name = note.toUpperCase();\r\n    switch (name) {\r\n        case 'DB': return 'C#';\r\n        case 'EB': return 'D#';\r\n        case 'FB': return 'E';\r\n        case 'GB': return 'F#';\r\n        case 'AB': return 'G#';\r\n        case 'BB': return 'A#';\r\n        case 'E#': return 'F';\r\n        case 'B#': return 'C';\r\n        default: return name;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the MIDI note number for a note name and octave (e.g., C4 = 60)\r\n */\r\nexport function getMidiNote(noteName: string, octave: number): number {\r\n    const normalized = normalizeNoteName(noteName);\r\n    const index = NOTES.indexOf(normalized);\r\n    if (index === -1) {\r\n        throw new Error(`Invalid note name: ${noteName}`);\r\n    }\r\n    return 12 * (octave + 1) + index;\r\n}\r\n\r\n/**\r\n * Converts a MIDI note number to note name and octave (e.g., 60 -> C4)\r\n */\r\nexport function getNoteNameFromMidi(midiNote: number): string {\r\n    const note = NOTES[midiNote % 12];\r\n    const octave = Math.floor(midiNote / 12) - 1;\r\n    return `${note}${octave}`;\r\n}\r\n", "// StepSequencer.ts\r\n// Basic structure for a step sequencer module\r\n\r\nexport interface Step {\r\n    active: boolean;\r\n    note: string; // e.g., 'C4', 'D#3', etc.\r\n    velocity: number;\r\n}\r\n\r\nexport class StepSequencer {\r\n    steps: Step[];\r\n    stepCount: number;\r\n    currentStep: number;\r\n\r\n    constructor(stepCount: number = 16) {\r\n        this.stepCount = stepCount;\r\n        this.steps = Array.from({ length: stepCount }, () => ({ active: false, note: 'C4', velocity: 100 }));\r\n        this.currentStep = 0;\r\n    }\r\n\r\n    toggleStep(index: number) {\r\n        if (index >= 0 && index < this.stepCount) {\r\n            this.steps[index].active = !this.steps[index].active;\r\n        }\r\n    }\r\n\r\n    setStepNote(index: number, note: string) {\r\n        if (index >= 0 && index < this.stepCount) {\r\n            this.steps[index].note = note;\r\n        }\r\n    }\r\n\r\n    setStepVelocity(index: number, velocity: number) {\r\n        if (index >= 0 && index < this.stepCount) {\r\n            this.steps[index].velocity = velocity;\r\n        }\r\n    }\r\n\r\n    nextStep() {\r\n        this.currentStep = (this.currentStep + 1) % this.stepCount;\r\n        return this.currentStep;\r\n    }\r\n\r\n    reset() {\r\n        this.currentStep = 0;\r\n    }\r\n}\r\n\r\n// --- UI/DOM Integration for Step Sequencer Page ---\r\nimport { MidiGenerator } from './MidiGenerator';\r\nimport { PianoRollDrawer } from './PianoRollDrawer';\r\nimport { getNoteNameFromMidi } from './Utils';\r\n\r\nexport function setupStepSequencerUI() {\r\n    const form = document.getElementById('sequencerForm') as HTMLFormElement | null;\r\n    const statusDiv = document.getElementById('status');\r\n    const stepsInput = document.getElementById('steps') as HTMLInputElement | null;\r\n    const tempoInput = document.getElementById('tempo') as HTMLInputElement | null;\r\n    const noteSequenceInput = document.getElementById('noteSequence') as HTMLTextAreaElement | null;\r\n    const outputFileNameInput = document.getElementById('outputFileName') as HTMLInputElement | null;\r\n    const downloadMidiButton = document.getElementById('downloadMidiButton') as HTMLButtonElement | null;\r\n    const stepGridCanvas = document.getElementById('stepGridCanvas') as HTMLCanvasElement | null;\r\n\r\n    if (!form || !statusDiv || !stepsInput || !tempoInput || !noteSequenceInput || !outputFileNameInput || !downloadMidiButton || !stepGridCanvas) {\r\n        if (statusDiv) statusDiv.textContent = 'Error: Could not initialize the step sequencer (missing elements).';\r\n        return;\r\n    }\r\n\r\n    let sequencer = new StepSequencer(Number(stepsInput!.value) || 16);\r\n    const midiGenerator = new MidiGenerator();\r\n    let pianoRollDrawer: PianoRollDrawer;\r\n    try {\r\n        pianoRollDrawer = new PianoRollDrawer(stepGridCanvas!);\r\n    } catch (error: any) {\r\n        if (statusDiv) {\r\n            statusDiv.textContent = `Error: Canvas setup failed - ${error.message}`;\r\n            statusDiv.className = 'mt-4 text-center text-danger';\r\n        }\r\n        stepGridCanvas!.style.border = '2px solid red';\r\n        return;\r\n    }\r\n    let notesForPianoRoll: any[] = [];\r\n    let events: { midiNote: number; startStep: number; length: number; velocity: number }[] = [];\r\n    let maxStep = 0;\r\n\r\n    function parseNoteSequenceInput(): void {\r\n        sequencer = new StepSequencer(Number(stepsInput!.value) || 16);\r\n        // Accept both single-line (space-separated) and multi-line (newline-separated) input\r\n        const lines = noteSequenceInput!.value.split(/\\s+/).map(l => l.trim()).filter(Boolean);\r\n        events = [];\r\n        maxStep = 0;\r\n        for (const line of lines) {\r\n            const parts = line.split(':');\r\n            let note = 'C4';\r\n            let pos = 0;\r\n            let len = 1;\r\n            let vel = 100;\r\n            for (const part of parts) {\r\n                if (/^[A-G][#b]?\\d+$|^\\d+$/.test(part)) note = part;\r\n                else if (/^P(\\d+)$/i.test(part)) pos = parseInt(part.slice(1), 10) - 1;\r\n                else if (/^L(\\d+)$/i.test(part)) len = parseInt(part.slice(1), 10);\r\n                else if (/^V(\\d+)$/i.test(part)) vel = parseInt(part.slice(1), 10);\r\n            }\r\n            for (let i = 0; i < len; ++i) {\r\n                const idx = pos + i;\r\n                if (idx >= 0 && idx < sequencer.stepCount) {\r\n                    sequencer.steps[idx].active = true;\r\n                    sequencer.steps[idx].note = note;\r\n                    sequencer.steps[idx].velocity = vel;\r\n                }\r\n            }\r\n            // For piano roll preview:\r\n            const noteNameMatch = note.match(/^([A-G][#b]?)(\\d+)$/i);\r\n            if (!noteNameMatch) continue;\r\n            const noteName = noteNameMatch[1];\r\n            const octave = parseInt(noteNameMatch[2], 10);\r\n            const midiNote = midiGenerator['getMidiNote'](noteName, octave);\r\n            events.push({ midiNote, startStep: pos, length: len, velocity: vel });\r\n            if (pos + len > maxStep) maxStep = pos + len;\r\n        }\r\n        // Group events by step for simultaneity\r\n        const stepMap: Record<number, typeof events> = {};\r\n        for (const ev of events) {\r\n            for (let i = 0; i < ev.length; ++i) {\r\n                const step = ev.startStep + i;\r\n                if (!stepMap[step]) stepMap[step] = [];\r\n                stepMap[step].push({ ...ev, startStep: step, length: 1 });\r\n            }\r\n        }\r\n        // Build notesForPianoRoll for the drawer\r\n        const TPQN = 128;\r\n        const stepTicks = TPQN / 4;\r\n        notesForPianoRoll = [];\r\n        for (let step = 0; step < maxStep; ++step) {\r\n            const eventsAtStep = stepMap[step] || [];\r\n            if (eventsAtStep.length > 0) {\r\n                eventsAtStep.forEach((ev) => {\r\n                    notesForPianoRoll.push({\r\n                        midiNote: ev.midiNote,\r\n                        startTimeTicks: step * stepTicks,\r\n                        durationTicks: stepTicks,\r\n                        velocity: ev.velocity\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function drawStepGrid() {\r\n        pianoRollDrawer.draw(notesForPianoRoll);\r\n    }\r\n\r\n    function stepsToProgressionString(): string {\r\n        // Build progression string from parsed events, not from Step array\r\n        // Only output real notes, skip dummy rest notes for empty steps\r\n        const stepMap: Record<number, typeof events> = {};\r\n        for (const ev of events) {\r\n            if (!stepMap[ev.startStep]) stepMap[ev.startStep] = [];\r\n            stepMap[ev.startStep].push(ev);\r\n        }\r\n        const totalSteps = Number(stepsInput!.value) || 16;\r\n        let progression: string[] = [];\r\n        for (let i = 0; i < totalSteps; ++i) {\r\n            const evs = stepMap[i] || [];\r\n            if (evs.length > 0) {\r\n                // Output all notes at this step as separate entries (for simultaneity)\r\n                evs.forEach(ev => {\r\n                    progression.push(`${getNoteNameFromMidi(ev.midiNote)}:P${i+1}:L${ev.length}:V${ev.velocity}`);\r\n                });\r\n            }\r\n            // No dummy note for empty steps!\r\n        }\r\n        return progression.join(' ');\r\n    }\r\n\r\n    function handleDownload() {\r\n        try {\r\n            const progressionString = stepsToProgressionString();\r\n            if (!progressionString) {\r\n                statusDiv!.textContent = 'No active steps to export.';\r\n                statusDiv!.className = 'mt-4 text-center text-danger';\r\n                return;\r\n            }\r\n            const options = {\r\n                progressionString,\r\n                outputFileName: outputFileNameInput!.value || 'sequence.mid',\r\n                outputType: 'notesOnly' as const,\r\n                inversionType: 'none' as const,\r\n                baseOctave: 4,\r\n                chordDurationStr: undefined,\r\n                tempo: Number(tempoInput!.value) || 120,\r\n                velocity: 100,\r\n                totalSteps: Number(stepsInput!.value) || 16 // Pass total steps from UI\r\n            };\r\n            const result = midiGenerator.generate(options);\r\n            const blob = result.midiBlob;\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = result.finalFileName;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            URL.revokeObjectURL(url);\r\n            statusDiv!.textContent = `MIDI file \"${result.finalFileName}\" download initiated.`;\r\n            statusDiv!.className = 'mt-4 text-center text-success';\r\n        } catch (err: any) {\r\n            statusDiv!.textContent = 'Error: ' + (err.message || 'Failed to generate MIDI.');\r\n            statusDiv!.className = 'mt-4 text-center text-danger';\r\n        }\r\n    }\r\n\r\n    // --- Event Listeners ---\r\n    stepsInput!.addEventListener('change', () => {\r\n        sequencer = new StepSequencer(Number(stepsInput!.value) || 16);\r\n        parseNoteSequenceInput();\r\n        drawStepGrid();\r\n    });\r\n    noteSequenceInput!.addEventListener('input', () => {\r\n        parseNoteSequenceInput();\r\n        drawStepGrid();\r\n    });\r\n    downloadMidiButton!.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        parseNoteSequenceInput();\r\n        drawStepGrid();\r\n        handleDownload();\r\n    });\r\n\r\n    // --- Initial State ---\r\n    parseNoteSequenceInput();\r\n    drawStepGrid();\r\n    statusDiv!.textContent = 'Enter notes and click Download.';\r\n}\r\n", "// Main.ts\r\nimport { setupChordProgressionSequencer } from './ChordProgressionSequencer';\r\nimport { setupStepSequencerUI } from './StepSequencer';\r\n\r\n// Only run the appropriate setup on DOMContentLoaded\r\nfunction runAppInit() {\r\n    if (document.getElementById('midiForm')) {\r\n        setupChordProgressionSequencer();\r\n    } else if (document.getElementById('sequencerForm')) {\r\n        setupStepSequencerUI();\r\n    }\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', runAppInit);\r\n} else {\r\n    runAppInit();\r\n}\r\n"],
  "mappings": "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",
  "names": ["Utils", "ControllerChangeEvent", "CopyrightEvent", "CuePointEvent", "EndTrackEvent", "InstrumentNameEvent", "KeySignatureEvent", "note", "LyricEvent", "MarkerEvent", "NoteOnEvent", "NoteOffEvent", "NoteEvent", "PitchBendEvent", "ProgramChangeEvent", "TempoEvent", "TextEvent", "TimeSignatureEvent", "TrackNameEvent", "Track", "VexFlow", "Header", "Writer", "chosenBassNote", "TPQN", "track", "midiWriterJs", "notesForPianoRoll", "velocity", "writer", "midiDataBytes", "midiBlob", "NOTES", "TPQN"]
}
